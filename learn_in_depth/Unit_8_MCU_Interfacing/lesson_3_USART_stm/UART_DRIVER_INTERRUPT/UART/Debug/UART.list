
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b38  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c68  08000c68  00010c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c80  08000c80  00010c88  2**0
                  CONTENTS
  4 .ARM          00000000  08000c80  08000c80  00010c88  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c80  08000c88  00010c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c80  08000c80  00010c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000c88  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000c88  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c88  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010cb1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000129c  00000000  00000000  00010cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000794  00000000  00000000  00011f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00012728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015f  00000000  00000000  00012918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001798  00000000  00000000  00012a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b33  00000000  00000000  0001420f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006f1b  00000000  00000000  00015d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000005bc  00000000  00000000  0001cc60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000bc  00000000  00000000  0001d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c50 	.word	0x08000c50

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c50 	.word	0x08000c50

08000170 <EXTI0_IRQHandler>:
/* =============== ISR Functions ================== */
/* ================================================ */

// EXTI0
void EXTI0_IRQHandler (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	2000001c 	.word	0x2000001c

08000390 <Get_CRLH_Position>:

#include "../../UART/MCAL/inc/stm32f103c6tx_GPIO.h"


static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a0:	f000 80a5 	beq.w	80004ee <Get_CRLH_Position+0x15e>
 80003a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003a8:	f300 80a3 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b0:	f000 809b 	beq.w	80004ea <Get_CRLH_Position+0x15a>
 80003b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003b8:	f300 809b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c0:	f000 8091 	beq.w	80004e6 <Get_CRLH_Position+0x156>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	f300 8093 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d0:	f000 8087 	beq.w	80004e2 <Get_CRLH_Position+0x152>
 80003d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d8:	f300 808b 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e0:	d07d      	beq.n	80004de <Get_CRLH_Position+0x14e>
 80003e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003e6:	f300 8084 	bgt.w	80004f2 <Get_CRLH_Position+0x162>
 80003ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ee:	d074      	beq.n	80004da <Get_CRLH_Position+0x14a>
 80003f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003f4:	dc7d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 80003f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003fa:	d06c      	beq.n	80004d6 <Get_CRLH_Position+0x146>
 80003fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000400:	dc77      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000406:	d064      	beq.n	80004d2 <Get_CRLH_Position+0x142>
 8000408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800040c:	dc71      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 800040e:	2b80      	cmp	r3, #128	; 0x80
 8000410:	d05d      	beq.n	80004ce <Get_CRLH_Position+0x13e>
 8000412:	2b80      	cmp	r3, #128	; 0x80
 8000414:	dc6d      	bgt.n	80004f2 <Get_CRLH_Position+0x162>
 8000416:	2b20      	cmp	r3, #32
 8000418:	dc48      	bgt.n	80004ac <Get_CRLH_Position+0x11c>
 800041a:	2b00      	cmp	r3, #0
 800041c:	dd69      	ble.n	80004f2 <Get_CRLH_Position+0x162>
 800041e:	3b01      	subs	r3, #1
 8000420:	2b1f      	cmp	r3, #31
 8000422:	d866      	bhi.n	80004f2 <Get_CRLH_Position+0x162>
 8000424:	a201      	add	r2, pc, #4	; (adr r2, 800042c <Get_CRLH_Position+0x9c>)
 8000426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800042a:	bf00      	nop
 800042c:	080004b3 	.word	0x080004b3
 8000430:	080004b7 	.word	0x080004b7
 8000434:	080004f3 	.word	0x080004f3
 8000438:	080004bb 	.word	0x080004bb
 800043c:	080004f3 	.word	0x080004f3
 8000440:	080004f3 	.word	0x080004f3
 8000444:	080004f3 	.word	0x080004f3
 8000448:	080004bf 	.word	0x080004bf
 800044c:	080004f3 	.word	0x080004f3
 8000450:	080004f3 	.word	0x080004f3
 8000454:	080004f3 	.word	0x080004f3
 8000458:	080004f3 	.word	0x080004f3
 800045c:	080004f3 	.word	0x080004f3
 8000460:	080004f3 	.word	0x080004f3
 8000464:	080004f3 	.word	0x080004f3
 8000468:	080004c3 	.word	0x080004c3
 800046c:	080004f3 	.word	0x080004f3
 8000470:	080004f3 	.word	0x080004f3
 8000474:	080004f3 	.word	0x080004f3
 8000478:	080004f3 	.word	0x080004f3
 800047c:	080004f3 	.word	0x080004f3
 8000480:	080004f3 	.word	0x080004f3
 8000484:	080004f3 	.word	0x080004f3
 8000488:	080004f3 	.word	0x080004f3
 800048c:	080004f3 	.word	0x080004f3
 8000490:	080004f3 	.word	0x080004f3
 8000494:	080004f3 	.word	0x080004f3
 8000498:	080004f3 	.word	0x080004f3
 800049c:	080004f3 	.word	0x080004f3
 80004a0:	080004f3 	.word	0x080004f3
 80004a4:	080004f3 	.word	0x080004f3
 80004a8:	080004c7 	.word	0x080004c7
 80004ac:	2b40      	cmp	r3, #64	; 0x40
 80004ae:	d00c      	beq.n	80004ca <Get_CRLH_Position+0x13a>
	case GPIO_PIN_15:
		return 28;
		break;

	default:
		break;
 80004b0:	e01f      	b.n	80004f2 <Get_CRLH_Position+0x162>
		return 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e01f      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 4;
 80004b6:	2304      	movs	r3, #4
 80004b8:	e01d      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 8;
 80004ba:	2308      	movs	r3, #8
 80004bc:	e01b      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 12;
 80004be:	230c      	movs	r3, #12
 80004c0:	e019      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 16;
 80004c2:	2310      	movs	r3, #16
 80004c4:	e017      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 20;
 80004c6:	2314      	movs	r3, #20
 80004c8:	e015      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 24;
 80004ca:	2318      	movs	r3, #24
 80004cc:	e013      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 28;
 80004ce:	231c      	movs	r3, #28
 80004d0:	e011      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 0;
 80004d2:	2300      	movs	r3, #0
 80004d4:	e00f      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 4;
 80004d6:	2304      	movs	r3, #4
 80004d8:	e00d      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 8;
 80004da:	2308      	movs	r3, #8
 80004dc:	e00b      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 12;
 80004de:	230c      	movs	r3, #12
 80004e0:	e009      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 16;
 80004e2:	2310      	movs	r3, #16
 80004e4:	e007      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 20;
 80004e6:	2314      	movs	r3, #20
 80004e8:	e005      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 24;
 80004ea:	2318      	movs	r3, #24
 80004ec:	e003      	b.n	80004f6 <Get_CRLH_Position+0x166>
		return 28;
 80004ee:	231c      	movs	r3, #28
 80004f0:	e001      	b.n	80004f6 <Get_CRLH_Position+0x166>
		break;
 80004f2:	bf00      	nop
	}
	return 0;
 80004f4:	2300      	movs	r3, #0
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <MCAL_GPIO_Init>:
 * @retval 			- None
 * Note				- Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINs from the Module
 */
void MCAL_GPIO_Init (GPIO_Typedef_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  0 >>> 7
	//Port configuration register high (GPIOx_CRH) 8 >>> 15
	volatile uint32 *config_reg = NULL; // To store which register for the input pin number
 800050a:	2300      	movs	r3, #0
 800050c:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_CONFIG = 0 ; // To store the pin configuration
 800050e:	2300      	movs	r3, #0
 8000510:	73fb      	strb	r3, [r7, #15]

	// Check if the input GPIO is bigger than bit number 8 to return the correct register for it
	config_reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8)  ? &GPIOx->CRL : &GPIOx->CRH; // Return the register (Low or High)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	881b      	ldrh	r3, [r3, #0]
 8000516:	2bff      	cmp	r3, #255	; 0xff
 8000518:	d801      	bhi.n	800051e <MCAL_GPIO_Init+0x1e>
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	e001      	b.n	8000522 <MCAL_GPIO_Init+0x22>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	3304      	adds	r3, #4
 8000522:	60bb      	str	r3, [r7, #8]

	// Clear CNF8[1:0] MODE8[1:0]
	(*config_reg) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <Get_CRLH_Position>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	230f      	movs	r3, #15
 8000534:	4093      	lsls	r3, r2
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	401a      	ands	r2, r3
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	601a      	str	r2, [r3, #0]

	// If pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	789b      	ldrb	r3, [r3, #2]
 8000546:	2b07      	cmp	r3, #7
 8000548:	d00b      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	789b      	ldrb	r3, [r3, #2]
 800054e:	2b06      	cmp	r3, #6
 8000550:	d007      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	789b      	ldrb	r3, [r3, #2]
 8000556:	2b05      	cmp	r3, #5
 8000558:	d003      	beq.n	8000562 <MCAL_GPIO_Init+0x62>
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	789b      	ldrb	r3, [r3, #2]
 800055e:	2b04      	cmp	r3, #4
 8000560:	d10e      	bne.n	8000580 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF8[1:0] MODE8[1:0]
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2)|(PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	3b04      	subs	r3, #4
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	b25a      	sxtb	r2, r3
 800056c:	683b      	ldr	r3, [r7, #0]
 800056e:	78db      	ldrb	r3, [r3, #3]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4313      	orrs	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2db      	uxtb	r3, r3
 8000578:	f003 030f 	and.w	r3, r3, #15
 800057c:	73fb      	strb	r3, [r7, #15]
 800057e:	e02c      	b.n	80005da <MCAL_GPIO_Init+0xda>

	}
	// If pin is input
	else //00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)||(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	789b      	ldrb	r3, [r3, #2]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d003      	beq.n	8000590 <MCAL_GPIO_Init+0x90>
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d107      	bne.n	80005a0 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF8[1:0] MODE8[1:0] 00
			PIN_CONFIG = ((((PinConfig->GPIO_MODE) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	789b      	ldrb	r3, [r3, #2]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	b2db      	uxtb	r3, r3
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	73fb      	strb	r3, [r7, #15]
 800059e:	e01c      	b.n	80005da <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Considered that GPIO_MODE_AF_INPUT = GPIO_MODE_INPUT_FLO in data sheet
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	789b      	ldrb	r3, [r3, #2]
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d102      	bne.n	80005ae <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLO) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 80005a8:	2304      	movs	r3, #4
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e015      	b.n	80005da <MCAL_GPIO_Init+0xda>
		}
		else // Pull-up / Pull-Down Input
		{
			// GPIO_MODE_INPUT_PU == 0b10 as Table 20. Port bit configuration table
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 80005ae:	2308      	movs	r3, #8
 80005b0:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	789b      	ldrb	r3, [r3, #2]
 80005b6:	2b02      	cmp	r3, #2
 80005b8:	d107      	bne.n	80005ca <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	683a      	ldr	r2, [r7, #0]
 80005c0:	8812      	ldrh	r2, [r2, #0]
 80005c2:	431a      	orrs	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	e007      	b.n	80005da <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68db      	ldr	r3, [r3, #12]
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	8812      	ldrh	r2, [r2, #0]
 80005d2:	43d2      	mvns	r2, r2
 80005d4:	401a      	ands	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL or CRH
	(*config_reg) |= (PIN_CONFIG << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005da:	7bfc      	ldrb	r4, [r7, #15]
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	881b      	ldrh	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f7ff fed5 	bl	8000390 <Get_CRLH_Position>
 80005e6:	4603      	mov	r3, r0
 80005e8:	fa04 f203 	lsl.w	r2, r4, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	431a      	orrs	r2, r3
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	601a      	str	r2, [r3, #0]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}
	...

08000600 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512
const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9}; // Shift 1 right == multiply by 2


uint32 MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR >> 2)& 0b11)
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	089b      	lsrs	r3, r3, #2
 800060a:	f003 0303 	and.w	r3, r3, #3
 800060e:	2b02      	cmp	r3, #2
 8000610:	d00a      	beq.n	8000628 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 8000612:	2b02      	cmp	r3, #2
 8000614:	d80a      	bhi.n	800062c <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 800061a:	2b01      	cmp	r3, #1
 800061c:	d002      	beq.n	8000624 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 800061e:	e005      	b.n	800062c <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
		case 0:
			return HSI_RC_CLK;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 8000622:	e003      	b.n	800062c <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;

		case 1:
			// TODO need to calculate it // HSE user should specify it
			return HSE_CLK;
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 8000626:	e001      	b.n	800062c <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;

		case 2:
			// TODO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
			return 16000000;
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 800062a:	e7ff      	b.n	800062c <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
	}
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	007a1200 	.word	0x007a1200
 800063c:	00f42400 	.word	0x00f42400

08000640 <MCAL_RCC_GetHCLKFreq>:

uint32 MCAL_RCC_GetHCLKFreq(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
	// EXTRACT the AHBPPRESCALEAR FORM THE TBALE BY shifting the content of the control register starting form the 4th bit 4 bits and & with 0x0F
	// then devise the frequancy by devising the the extracted frequancey by the ahbpresclaer .
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]);
 8000644:	f7ff ffdc 	bl	8000600 <MCAL_RCC_GetSYS_CLKFreq>
 8000648:	4602      	mov	r2, r0
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MCAL_RCC_GetHCLKFreq+0x20>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	4903      	ldr	r1, [pc, #12]	; (8000664 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000656:	5ccb      	ldrb	r3, [r1, r3]
 8000658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	08000c70 	.word	0x08000c70

08000668 <MCAL_RCC_GetPCLK1Freq>:

uint32 MCAL_RCC_GetPCLK1Freq(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]);
 800066c:	f7ff ffe8 	bl	8000640 <MCAL_RCC_GetHCLKFreq>
 8000670:	4602      	mov	r2, r0
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	4903      	ldr	r1, [pc, #12]	; (800068c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800067e:	5ccb      	ldrb	r3, [r1, r3]
 8000680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	08000c68 	.word	0x08000c68

08000690 <MCAL_RCC_GetPCLK2Freq>:
uint32 MCAL_RCC_GetPCLK2Freq(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed pre-scaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]);
 8000694:	f7ff ffd4 	bl	8000640 <MCAL_RCC_GetHCLKFreq>
 8000698:	4602      	mov	r2, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	0adb      	lsrs	r3, r3, #11
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	4903      	ldr	r1, [pc, #12]	; (80006b4 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80006a6:	5ccb      	ldrb	r3, [r1, r3]
 80006a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	08000c68 	.word	0x08000c68

080006b8 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_Typedef_t* USARTx, USART_Config_t* UART_Config)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	uint32 pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a5a      	ldr	r2, [pc, #360]	; (8000830 <MCAL_UART_Init+0x178>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d109      	bne.n	80006de <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 80006ca:	4b5a      	ldr	r3, [pc, #360]	; (8000834 <MCAL_UART_Init+0x17c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a59      	ldr	r2, [pc, #356]	; (8000834 <MCAL_UART_Init+0x17c>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 80006d6:	4a58      	ldr	r2, [pc, #352]	; (8000838 <MCAL_UART_Init+0x180>)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	e01a      	b.n	8000714 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4a56      	ldr	r2, [pc, #344]	; (800083c <MCAL_UART_Init+0x184>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d109      	bne.n	80006fa <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 80006e6:	4b53      	ldr	r3, [pc, #332]	; (8000834 <MCAL_UART_Init+0x17c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a52      	ldr	r2, [pc, #328]	; (8000834 <MCAL_UART_Init+0x17c>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f0:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 80006f2:	4a51      	ldr	r2, [pc, #324]	; (8000838 <MCAL_UART_Init+0x180>)
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	6053      	str	r3, [r2, #4]
 80006f8:	e00c      	b.n	8000714 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a50      	ldr	r2, [pc, #320]	; (8000840 <MCAL_UART_Init+0x188>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d108      	bne.n	8000714 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 8000702:	4b4c      	ldr	r3, [pc, #304]	; (8000834 <MCAL_UART_Init+0x17c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a4b      	ldr	r2, [pc, #300]	; (8000834 <MCAL_UART_Init+0x17c>)
 8000708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800070c:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 800070e:	4a4a      	ldr	r2, [pc, #296]	; (8000838 <MCAL_UART_Init+0x180>)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	683a      	ldr	r2, [r7, #0]
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	431a      	orrs	r2, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	68db      	ldr	r3, [r3, #12]
 8000732:	683a      	ldr	r2, [r7, #0]
 8000734:	7a12      	ldrb	r2, [r2, #8]
 8000736:	431a      	orrs	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	7a52      	ldrb	r2, [r2, #9]
 8000744:	431a      	orrs	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	7a92      	ldrb	r2, [r2, #10]
 8000752:	431a      	orrs	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	695b      	ldr	r3, [r3, #20]
 800075c:	683a      	ldr	r2, [r7, #0]
 800075e:	7ad2      	ldrb	r2, [r2, #11]
 8000760:	431a      	orrs	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a31      	ldr	r2, [pc, #196]	; (8000830 <MCAL_UART_Init+0x178>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d104      	bne.n	8000778 <MCAL_UART_Init+0xc0>

	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 800076e:	f7ff ff8f 	bl	8000690 <MCAL_RCC_GetPCLK2Freq>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]
 8000776:	e003      	b.n	8000780 <MCAL_UART_Init+0xc8>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000778:	f7ff ff76 	bl	8000668 <MCAL_RCC_GetPCLK1Freq>
 800077c:	4603      	mov	r3, r0
 800077e:	60fb      	str	r3, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	fbb2 f3f3 	udiv	r3, r2, r3
 800078c:	0119      	lsls	r1, r3, #4
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	4613      	mov	r3, r2
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	4413      	add	r3, r2
 8000796:	009a      	lsls	r2, r3, #2
 8000798:	441a      	add	r2, r3
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	68f8      	ldr	r0, [r7, #12]
 80007ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80007b0:	2064      	movs	r0, #100	; 0x64
 80007b2:	fb00 f303 	mul.w	r3, r0, r3
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	011b      	lsls	r3, r3, #4
 80007ba:	4a22      	ldr	r2, [pc, #136]	; (8000844 <MCAL_UART_Init+0x18c>)
 80007bc:	fba2 2303 	umull	r2, r3, r2, r3
 80007c0:	095b      	lsrs	r3, r3, #5
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	430b      	orrs	r3, r1
 80007c8:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	7b1b      	ldrb	r3, [r3, #12]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d026      	beq.n	8000826 <MCAL_UART_Init+0x16e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	7b12      	ldrb	r2, [r2, #12]
 80007e0:	431a      	orrs	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a11      	ldr	r2, [pc, #68]	; (8000830 <MCAL_UART_Init+0x178>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d106      	bne.n	80007fc <MCAL_UART_Init+0x144>
			NVIC_IRQ37_USART1_EN();
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MCAL_UART_Init+0x190>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a15      	ldr	r2, [pc, #84]	; (8000848 <MCAL_UART_Init+0x190>)
 80007f4:	f043 0320 	orr.w	r3, r3, #32
 80007f8:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_EN();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_EN();
	}
}
 80007fa:	e014      	b.n	8000826 <MCAL_UART_Init+0x16e>
		else if (USARTx == USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <MCAL_UART_Init+0x184>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d106      	bne.n	8000812 <MCAL_UART_Init+0x15a>
			NVIC_IRQ38_USART2_EN();
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MCAL_UART_Init+0x190>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0f      	ldr	r2, [pc, #60]	; (8000848 <MCAL_UART_Init+0x190>)
 800080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080e:	6013      	str	r3, [r2, #0]
}
 8000810:	e009      	b.n	8000826 <MCAL_UART_Init+0x16e>
		else if (USARTx == USART3)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <MCAL_UART_Init+0x188>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d105      	bne.n	8000826 <MCAL_UART_Init+0x16e>
			NVIC_IRQ39_USART3_EN();
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MCAL_UART_Init+0x190>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <MCAL_UART_Init+0x190>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	6013      	str	r3, [r2, #0]
}
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40013800 	.word	0x40013800
 8000834:	40021000 	.word	0x40021000
 8000838:	20000058 	.word	0x20000058
 800083c:	40004400 	.word	0x40004400
 8000840:	40004800 	.word	0x40004800
 8000844:	51eb851f 	.word	0x51eb851f
 8000848:	e000e104 	.word	0xe000e104

0800084c <MCAL_UART_SendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_UART_SendData(USART_Typedef_t* USARTx, uint16_t* pTxBuffer, Polling_Mechanism_t PollingEn)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	4613      	mov	r3, r2
 8000858:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d106      	bne.n	800086e <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 8000860:	bf00      	nop
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086a:	2b00      	cmp	r3, #0
 800086c:	d0f9      	beq.n	8000862 <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <MCAL_UART_SendData+0x84>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10a      	bne.n	800088c <MCAL_UART_SendData+0x40>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8000876:	4b17      	ldr	r3, [pc, #92]	; (80008d4 <MCAL_UART_SendData+0x88>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	7a1b      	ldrb	r3, [r3, #8]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d122      	bne.n	80008c6 <MCAL_UART_SendData+0x7a>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	b2da      	uxtb	r2, r3
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 800088a:	e01c      	b.n	80008c6 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART2)
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <MCAL_UART_SendData+0x8c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d10a      	bne.n	80008aa <MCAL_UART_SendData+0x5e>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MCAL_UART_SendData+0x88>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	7a1b      	ldrb	r3, [r3, #8]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d113      	bne.n	80008c6 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	605a      	str	r2, [r3, #4]
}
 80008a8:	e00d      	b.n	80008c6 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART3)
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <MCAL_UART_SendData+0x90>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d109      	bne.n	80008c6 <MCAL_UART_SendData+0x7a>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <MCAL_UART_SendData+0x88>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	7a1b      	ldrb	r3, [r3, #8]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	605a      	str	r2, [r3, #4]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40013800 	.word	0x40013800
 80008d4:	20000058 	.word	0x20000058
 80008d8:	40004400 	.word	0x40004400
 80008dc:	40004800 	.word	0x40004800

080008e0 <MCAL_UART_ReceiveData>:
	/* Wait till TC flag is set in the SR */
	while(!(USARTx->SR & 1<<6));
}

void MCAL_UART_ReceiveData(USART_Typedef_t* USARTx, uint16_t* pRxBuffer, Polling_Mechanism_t PollingEn)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	4613      	mov	r3, r2
 80008ec:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == enable)
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 80008f4:	bf00      	nop
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f003 0320 	and.w	r3, r3, #32
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d0f9      	beq.n	80008f6 <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	4a28      	ldr	r2, [pc, #160]	; (80009a8 <MCAL_UART_ReceiveData+0xc8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d115      	bne.n	8000936 <MCAL_UART_ReceiveData+0x56>
			}
		}
		/* 8 Bits Data */
		else
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 800090a:	4b28      	ldr	r3, [pc, #160]	; (80009ac <MCAL_UART_ReceiveData+0xcc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	7a5b      	ldrb	r3, [r3, #9]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d107      	bne.n	8000924 <MCAL_UART_ReceiveData+0x44>
			{
				/* All 8 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	b29b      	uxth	r3, r3
 800091a:	b2db      	uxtb	r3, r3
 800091c:	b29a      	uxth	r2, r3
 800091e:	68bb      	ldr	r3, [r7, #8]
 8000920:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 8000922:	e03b      	b.n	800099c <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	b29b      	uxth	r3, r3
 800092a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800092e:	b29a      	uxth	r2, r3
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	801a      	strh	r2, [r3, #0]
}
 8000934:	e032      	b.n	800099c <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART2)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4a1d      	ldr	r2, [pc, #116]	; (80009b0 <MCAL_UART_ReceiveData+0xd0>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d115      	bne.n	800096a <MCAL_UART_ReceiveData+0x8a>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MCAL_UART_ReceiveData+0xcc>)
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	7a5b      	ldrb	r3, [r3, #9]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d107      	bne.n	8000958 <MCAL_UART_ReceiveData+0x78>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	b29b      	uxth	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	801a      	strh	r2, [r3, #0]
}
 8000956:	e021      	b.n	800099c <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	b29b      	uxth	r3, r3
 800095e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000962:	b29a      	uxth	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	801a      	strh	r2, [r3, #0]
}
 8000968:	e018      	b.n	800099c <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART3)
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <MCAL_UART_ReceiveData+0xd4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d114      	bne.n	800099c <MCAL_UART_ReceiveData+0xbc>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MCAL_UART_ReceiveData+0xcc>)
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	7a5b      	ldrb	r3, [r3, #9]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d107      	bne.n	800098c <MCAL_UART_ReceiveData+0xac>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	b29a      	uxth	r2, r3
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	801a      	strh	r2, [r3, #0]
}
 800098a:	e007      	b.n	800099c <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	b29b      	uxth	r3, r3
 8000992:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000996:	b29a      	uxth	r2, r3
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	801a      	strh	r2, [r3, #0]
}
 800099c:	bf00      	nop
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40013800 	.word	0x40013800
 80009ac:	20000058 	.word	0x20000058
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40004800 	.word	0x40004800

080009b8 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef_t* USARTx)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pin_Config;

	if (USARTx == USART1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a3b      	ldr	r2, [pc, #236]	; (8000ab0 <MCAL_UART_GPIO_Set_Pins+0xf8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d118      	bne.n	80009fa <MCAL_UART_GPIO_Set_Pins+0x42>
		// PA10 Rx
		// PA11 CTS
		// PA12 RTS

		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 80009ce:	2306      	movs	r3, #6
 80009d0:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4835      	ldr	r0, [pc, #212]	; (8000ab4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 80009de:	f7ff fd8f 	bl	8000500 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 80009e8:	2308      	movs	r3, #8
 80009ea:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	4830      	ldr	r0, [pc, #192]	; (8000ab4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 80009f4:	f7ff fd84 	bl	8000500 <MCAL_GPIO_Init>
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
		}
	}
}
 80009f8:	e055      	b.n	8000aa6 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART2)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <MCAL_UART_GPIO_Set_Pins+0x100>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d125      	bne.n	8000a4e <MCAL_UART_GPIO_Set_Pins+0x96>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 8000a02:	2304      	movs	r3, #4
 8000a04:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a06:	2306      	movs	r3, #6
 8000a08:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	4619      	mov	r1, r3
 8000a14:	4827      	ldr	r0, [pc, #156]	; (8000ab4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000a16:	f7ff fd73 	bl	8000500 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	4822      	ldr	r0, [pc, #136]	; (8000ab4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000a2a:	f7ff fd69 	bl	8000500 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	7adb      	ldrb	r3, [r3, #11]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d036      	beq.n	8000aa6 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000a48:	f7ff fd5a 	bl	8000500 <MCAL_GPIO_Init>
}
 8000a4c:	e02b      	b.n	8000aa6 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART3)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a1b      	ldr	r2, [pc, #108]	; (8000ac0 <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d127      	bne.n	8000aa6 <MCAL_UART_GPIO_Set_Pins+0xee>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a5a:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000a6c:	f7ff fd48 	bl	8000500 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 8000a70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a74:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a76:	2308      	movs	r3, #8
 8000a78:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000a7a:	f107 030c 	add.w	r3, r7, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4810      	ldr	r0, [pc, #64]	; (8000ac4 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000a82:	f7ff fd3d 	bl	8000500 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000a88:	689b      	ldr	r3, [r3, #8]
 8000a8a:	7adb      	ldrb	r3, [r3, #11]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d00a      	beq.n	8000aa6 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a94:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000aa2:	f7ff fd2d 	bl	8000500 <MCAL_GPIO_Init>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40013800 	.word	0x40013800
 8000ab4:	40010800 	.word	0x40010800
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	20000058 	.word	0x20000058
 8000ac0:	40004800 	.word	0x40004800
 8000ac4:	40010c00 	.word	0x40010c00

08000ac8 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <USART1_IRQHandler+0x10>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	4798      	blx	r3
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000058 	.word	0x20000058

08000adc <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000ae0:	4b02      	ldr	r3, [pc, #8]	; (8000aec <USART2_IRQHandler+0x10>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	691b      	ldr	r3, [r3, #16]
 8000ae6:	4798      	blx	r3
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000058 	.word	0x20000058

08000af0 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <USART3_IRQHandler+0x10>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	4798      	blx	r3
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000058 	.word	0x20000058

08000b04 <main>:

#include <stdint.h>

#include "../../UART/app layer/inc/test_uart_polling.h"
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	 USART_Test_1_Debugging_Using_interrupt();
 8000b08:	f000 f82e 	bl	8000b68 <USART_Test_1_Debugging_Using_interrupt>
 8000b0c:	2300      	movs	r3, #0

}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1e:	490d      	ldr	r1, [pc, #52]	; (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b24:	e002      	b.n	8000b2c <LoopCopyDataInit>

08000b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2a:	3304      	adds	r3, #4

08000b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b30:	d3f9      	bcc.n	8000b26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b34:	4c0a      	ldr	r4, [pc, #40]	; (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b38:	e001      	b.n	8000b3e <LoopFillZerobss>

08000b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b3c:	3204      	adds	r2, #4

08000b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b40:	d3fb      	bcc.n	8000b3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b42:	f000 f861 	bl	8000c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff ffdd 	bl	8000b04 <main>

08000b4a <LoopForever>:

LoopForever:
  b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   r0, =_estack
 8000b4c:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b58:	08000c88 	.word	0x08000c88
  ldr r2, =_sbss
 8000b5c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b60:	20000068 	.word	0x20000068

08000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_2_IRQHandler>
	...

08000b68 <USART_Test_1_Debugging_Using_interrupt>:
static void clock_init(void);
void callback_uart(void) ;

/* =========== Main Program ========== */
void USART_Test_1_Debugging_Using_interrupt(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
	/* Initializing the clock */
	clock_init();
 8000b6e:	f000 f81f 	bl	8000bb0 <clock_init>

	/* Configuration of USART1 */
	USART_Config_t USART1_Config;

	USART1_Config.BaudRate = UART_BaudRate_115200;
 8000b72:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b76:	60bb      	str	r3, [r7, #8]
	USART1_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	73fb      	strb	r3, [r7, #15]
	USART1_Config.IRQ_Enable = UART_IRQ_Enable_RXNEIE ;
 8000b7c:	2320      	movs	r3, #32
 8000b7e:	743b      	strb	r3, [r7, #16]
	USART1_Config.P_IRQ_CallBack = callback_uart;
 8000b80:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <USART_Test_1_Debugging_Using_interrupt+0x40>)
 8000b82:	617b      	str	r3, [r7, #20]
	USART1_Config.Parity = UART_Parity_NONE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	737b      	strb	r3, [r7, #13]
	USART1_Config.Payload_Length = UART_Payload_Length_8B;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	733b      	strb	r3, [r7, #12]
	USART1_Config.StopBits = UART_StopBits_1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73bb      	strb	r3, [r7, #14]
	USART1_Config.USART_Mode = UART_Mode_TX_RX;
 8000b90:	230c      	movs	r3, #12
 8000b92:	713b      	strb	r3, [r7, #4]


	MCAL_UART_Init(USART1, &USART1_Config);
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4804      	ldr	r0, [pc, #16]	; (8000bac <USART_Test_1_Debugging_Using_interrupt+0x44>)
 8000b9a:	f7ff fd8d 	bl	80006b8 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 8000b9e:	4803      	ldr	r0, [pc, #12]	; (8000bac <USART_Test_1_Debugging_Using_interrupt+0x44>)
 8000ba0:	f7ff ff0a 	bl	80009b8 <MCAL_UART_GPIO_Set_Pins>

	while(1)
 8000ba4:	e7fe      	b.n	8000ba4 <USART_Test_1_Debugging_Using_interrupt+0x3c>
 8000ba6:	bf00      	nop
 8000ba8:	08000be5 	.word	0x08000be5
 8000bac:	40013800 	.word	0x40013800

08000bb0 <clock_init>:
	}
}

/* ======== clock Initialize definition ======= */
static void clock_init(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 8000bb4:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <clock_init+0x30>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <clock_init+0x30>)
 8000bba:	f043 0304 	orr.w	r3, r3, #4
 8000bbe:	6193      	str	r3, [r2, #24]

	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <clock_init+0x30>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a06      	ldr	r2, [pc, #24]	; (8000be0 <clock_init+0x30>)
 8000bc6:	f043 0308 	orr.w	r3, r3, #8
 8000bca:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <clock_init+0x30>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a03      	ldr	r2, [pc, #12]	; (8000be0 <clock_init+0x30>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6193      	str	r3, [r2, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	40021000 	.word	0x40021000

08000be4 <callback_uart>:
void callback_uart(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	MCAL_UART_SendData(USART1, &data, enable);
 8000be8:	2201      	movs	r2, #1
 8000bea:	4905      	ldr	r1, [pc, #20]	; (8000c00 <callback_uart+0x1c>)
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <callback_uart+0x20>)
 8000bee:	f7ff fe2d 	bl	800084c <MCAL_UART_SendData>

    MCAL_UART_ReceiveData(USART1, &data, enable);
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4902      	ldr	r1, [pc, #8]	; (8000c00 <callback_uart+0x1c>)
 8000bf6:	4803      	ldr	r0, [pc, #12]	; (8000c04 <callback_uart+0x20>)
 8000bf8:	f7ff fe72 	bl	80008e0 <MCAL_UART_ReceiveData>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000064 	.word	0x20000064
 8000c04:	40013800 	.word	0x40013800

08000c08 <__libc_init_array>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	2600      	movs	r6, #0
 8000c0c:	4d0c      	ldr	r5, [pc, #48]	; (8000c40 <__libc_init_array+0x38>)
 8000c0e:	4c0d      	ldr	r4, [pc, #52]	; (8000c44 <__libc_init_array+0x3c>)
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	10a4      	asrs	r4, r4, #2
 8000c14:	42a6      	cmp	r6, r4
 8000c16:	d109      	bne.n	8000c2c <__libc_init_array+0x24>
 8000c18:	f000 f81a 	bl	8000c50 <_init>
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	4d0a      	ldr	r5, [pc, #40]	; (8000c48 <__libc_init_array+0x40>)
 8000c20:	4c0a      	ldr	r4, [pc, #40]	; (8000c4c <__libc_init_array+0x44>)
 8000c22:	1b64      	subs	r4, r4, r5
 8000c24:	10a4      	asrs	r4, r4, #2
 8000c26:	42a6      	cmp	r6, r4
 8000c28:	d105      	bne.n	8000c36 <__libc_init_array+0x2e>
 8000c2a:	bd70      	pop	{r4, r5, r6, pc}
 8000c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c30:	4798      	blx	r3
 8000c32:	3601      	adds	r6, #1
 8000c34:	e7ee      	b.n	8000c14 <__libc_init_array+0xc>
 8000c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c3a:	4798      	blx	r3
 8000c3c:	3601      	adds	r6, #1
 8000c3e:	e7f2      	b.n	8000c26 <__libc_init_array+0x1e>
 8000c40:	08000c80 	.word	0x08000c80
 8000c44:	08000c80 	.word	0x08000c80
 8000c48:	08000c80 	.word	0x08000c80
 8000c4c:	08000c84 	.word	0x08000c84

08000c50 <_init>:
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	bf00      	nop
 8000c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c56:	bc08      	pop	{r3}
 8000c58:	469e      	mov	lr, r3
 8000c5a:	4770      	bx	lr

08000c5c <_fini>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	bf00      	nop
 8000c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c62:	bc08      	pop	{r3}
 8000c64:	469e      	mov	lr, r3
 8000c66:	4770      	bx	lr
