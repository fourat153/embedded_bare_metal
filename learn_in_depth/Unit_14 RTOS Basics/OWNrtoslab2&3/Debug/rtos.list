
rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d80  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000eb0  08000eb0  00010eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ed4  08000ed4  00010edc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed4  08000ed4  00010edc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed4  08000edc  00010edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010edc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  20000000  08000edc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004b4  08000edc  000204b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010edc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010f05  2**0
                  CONTENTS, READONLY
 13 .debug_info   000019f1  00000000  00000000  00010f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000897  00000000  00000000  00012939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00000b38  00000000  00000000  000131d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000210  00000000  00000000  00013d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000198  00000000  00000000  00013f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000391b  00000000  00000000  000140b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002b0d  00000000  00000000  000179cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000fa05  00000000  00000000  0001a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000648  00000000  00000000  00029ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  0002a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00000019  00000000  00000000  0002a5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000e98 	.word	0x08000e98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000e98 	.word	0x08000e98

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000184:	b480      	push	{r7}
 8000186:	b083      	sub	sp, #12
 8000188:	af00      	add	r7, sp, #0
 800018a:	4603      	mov	r3, r0
 800018c:	6039      	str	r1, [r7, #0]
 800018e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000194:	2b00      	cmp	r3, #0
 8000196:	db0a      	blt.n	80001ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	b2da      	uxtb	r2, r3
 800019c:	490c      	ldr	r1, [pc, #48]	; (80001d0 <__NVIC_SetPriority+0x4c>)
 800019e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a2:	0152      	lsls	r2, r2, #5
 80001a4:	b2d2      	uxtb	r2, r2
 80001a6:	440b      	add	r3, r1
 80001a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001ac:	e00a      	b.n	80001c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001ae:	683b      	ldr	r3, [r7, #0]
 80001b0:	b2da      	uxtb	r2, r3
 80001b2:	4908      	ldr	r1, [pc, #32]	; (80001d4 <__NVIC_SetPriority+0x50>)
 80001b4:	79fb      	ldrb	r3, [r7, #7]
 80001b6:	f003 030f 	and.w	r3, r3, #15
 80001ba:	3b04      	subs	r3, #4
 80001bc:	0152      	lsls	r2, r2, #5
 80001be:	b2d2      	uxtb	r2, r2
 80001c0:	440b      	add	r3, r1
 80001c2:	761a      	strb	r2, [r3, #24]
}
 80001c4:	bf00      	nop
 80001c6:	370c      	adds	r7, #12
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	e000e100 	.word	0xe000e100
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3b01      	subs	r3, #1
 80001e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80001e8:	d301      	bcc.n	80001ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80001ea:	2301      	movs	r3, #1
 80001ec:	e00f      	b.n	800020e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80001ee:	4a0a      	ldr	r2, [pc, #40]	; (8000218 <SysTick_Config+0x40>)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3b01      	subs	r3, #1
 80001f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80001f6:	2107      	movs	r1, #7
 80001f8:	f04f 30ff 	mov.w	r0, #4294967295
 80001fc:	f7ff ffc2 	bl	8000184 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <SysTick_Config+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000206:	4b04      	ldr	r3, [pc, #16]	; (8000218 <SysTick_Config+0x40>)
 8000208:	2207      	movs	r2, #7
 800020a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800020c:	2300      	movs	r3, #0
}
 800020e:	4618      	mov	r0, r3
 8000210:	3708      	adds	r7, #8
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	e000e010 	.word	0xe000e010

0800021c <HardFault_Handler>:
#include "../RTOS/inc/CortexMxOS_Porting.h"

// Enabling all faults for possible errors (Accessing memories etc.)

void HardFault_Handler()
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	while(1);
 8000220:	e7fe      	b.n	8000220 <HardFault_Handler+0x4>

08000222 <MemManage_Handler>:
}

void MemManage_Handler()
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
	while(1);
 8000226:	e7fe      	b.n	8000226 <MemManage_Handler+0x4>

08000228 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	while(1);
 800022c:	e7fe      	b.n	800022c <BusFault_Handler+0x4>

0800022e <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
	while(1);
 8000232:	e7fe      	b.n	8000232 <UsageFault_Handler+0x4>

08000234 <SVC_Handler>:

// Consider it as C function, but don't push anything in stack, it is assembly, force the compiler to not add anything
__attribute ((naked))  void SVC_Handler()
{
	// Check EXC_Return to see if you were MSP or PSP
	__asm("tst lr,#4 \n\t"
 8000234:	f01e 0f04 	tst.w	lr, #4
 8000238:	bf0c      	ite	eq
 800023a:	f3ef 8008 	mrseq	r0, MSP
 800023e:	f3ef 8009 	mrsne	r0, PSP
 8000242:	f000 b9d1 	b.w	80005e8 <OS_SVC_Services>
			"ITE EQ \n\t"
			"mrseq r0,MSP \n\t"
			"mrsne r0,PSP \n\t"
			"B OS_SVC_Services");
}
 8000246:	bf00      	nop

08000248 <Trigger_OS_PendSV>:


void Trigger_OS_PendSV()
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800024c:	4b04      	ldr	r3, [pc, #16]	; (8000260 <Trigger_OS_PendSV+0x18>)
 800024e:	685b      	ldr	r3, [r3, #4]
 8000250:	4a03      	ldr	r2, [pc, #12]	; (8000260 <Trigger_OS_PendSV+0x18>)
 8000252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000256:	6053      	str	r3, [r2, #4]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <HW_Init>:



void HW_Init()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	// X = 8000 counts

	// Decrease priority of pendSV to be less than or equal systick timer
	// systick = 14

	__NVIC_SetPriority(PendSV_IRQn, 15);
 8000268:	210f      	movs	r1, #15
 800026a:	f06f 0001 	mvn.w	r0, #1
 800026e:	f7ff ff89 	bl	8000184 <__NVIC_SetPriority>


}
 8000272:	bf00      	nop
 8000274:	bd80      	pop	{r7, pc}

08000276 <Start_Ticker>:




void Start_Ticker()
{
 8000276:	b580      	push	{r7, lr}
 8000278:	af00      	add	r7, sp, #0
	// 8 MHz (By default)
	// 1 count = 0.125 us
	// X count -> 1ms
	// X = 8000 counts

	SysTick_Config(8000);
 800027a:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800027e:	f7ff ffab 	bl	80001d8 <SysTick_Config>

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
	...

08000288 <SysTick_Handler>:


uint8_t SystTickIndication;

void SysTick_Handler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	SystTickIndication ^= 1;
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <SysTick_Handler+0x20>)
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	f083 0301 	eor.w	r3, r3, #1
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <SysTick_Handler+0x20>)
 8000298:	701a      	strb	r2, [r3, #0]
	// Decide what Next (To determine Pcurrent, Pnext)
	Decide_WhatNextTask();
 800029a:	f000 f955 	bl	8000548 <Decide_WhatNextTask>
	// Trigger PendSv(Switch Context & Restore)
	Trigger_OS_PendSV();
 800029e:	f7ff ffd3 	bl	8000248 <Trigger_OS_PendSV>
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000001c 	.word	0x2000001c

080002ac <FIFO_Init>:
#include "../RTOS/inc/My_RTOS_FIFO.h"



FIFO_Status FIFO_Init(FIFO_Buffer_t *fifo, Element_Type* Buffer, uint32_t length)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
	if(!Buffer)
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d101      	bne.n	80002c2 <FIFO_Init+0x16>
		return FIFO_Null;
 80002be:	2303      	movs	r3, #3
 80002c0:	e011      	b.n	80002e6 <FIFO_Init+0x3a>


	fifo->base = Buffer;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	68ba      	ldr	r2, [r7, #8]
 80002c6:	60da      	str	r2, [r3, #12]
	fifo->head = fifo->base;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	68da      	ldr	r2, [r3, #12]
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	605a      	str	r2, [r3, #4]
	fifo->tail = fifo->base;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68da      	ldr	r2, [r3, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	609a      	str	r2, [r3, #8]
	fifo->length = length;
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	687a      	ldr	r2, [r7, #4]
 80002dc:	611a      	str	r2, [r3, #16]
	fifo->counter = 0;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]

	return FIFO_No_Error;
 80002e4:	2300      	movs	r3, #0


}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <FIFO_Enqeue>:



FIFO_Status FIFO_Enqeue(FIFO_Buffer_t *fifo, Element_Type Item)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	// Check if the FIFO is valid
	if(!fifo->base || !fifo->length)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	68db      	ldr	r3, [r3, #12]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d003      	beq.n	800030a <FIFO_Enqeue+0x1a>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	691b      	ldr	r3, [r3, #16]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d101      	bne.n	800030e <FIFO_Enqeue+0x1e>
		return FIFO_Null;
 800030a:	2303      	movs	r3, #3
 800030c:	e02c      	b.n	8000368 <FIFO_Enqeue+0x78>

	// Full FIFO
	if((fifo->head == fifo->tail) && (fifo->counter == fifo->length))
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	685a      	ldr	r2, [r3, #4]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	689b      	ldr	r3, [r3, #8]
 8000316:	429a      	cmp	r2, r3
 8000318:	d107      	bne.n	800032a <FIFO_Enqeue+0x3a>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	429a      	cmp	r2, r3
 8000324:	d101      	bne.n	800032a <FIFO_Enqeue+0x3a>
		return FIFO_Full;
 8000326:	2301      	movs	r3, #1
 8000328:	e01e      	b.n	8000368 <FIFO_Enqeue+0x78>


	*(fifo->tail) = Item;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	601a      	str	r2, [r3, #0]
	fifo->counter++;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1c5a      	adds	r2, r3, #1
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	601a      	str	r2, [r3, #0]


	// Handle Circular Queue
	if(fifo->tail == ((uint32_t)fifo->base + (4*(fifo->length))))
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	68d2      	ldr	r2, [r2, #12]
 8000344:	4611      	mov	r1, r2
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	6912      	ldr	r2, [r2, #16]
 800034a:	0092      	lsls	r2, r2, #2
 800034c:	440a      	add	r2, r1
 800034e:	4293      	cmp	r3, r2
 8000350:	d104      	bne.n	800035c <FIFO_Enqeue+0x6c>
		fifo->tail = fifo->base;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68da      	ldr	r2, [r3, #12]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]
 800035a:	e004      	b.n	8000366 <FIFO_Enqeue+0x76>
	else
		fifo->tail++;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	1d1a      	adds	r2, r3, #4
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	609a      	str	r2, [r3, #8]

	return FIFO_No_Error;
 8000366:	2300      	movs	r3, #0
}
 8000368:	4618      	mov	r0, r3
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	bc80      	pop	{r7}
 8000370:	4770      	bx	lr

08000372 <FIFO_Deqeue>:




FIFO_Status FIFO_Deqeue(FIFO_Buffer_t *fifo, Element_Type* Item)
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
 800037a:	6039      	str	r1, [r7, #0]
	// Check if the FIFO is valid
	if(!fifo->base || !fifo->length)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	68db      	ldr	r3, [r3, #12]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d003      	beq.n	800038c <FIFO_Deqeue+0x1a>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d101      	bne.n	8000390 <FIFO_Deqeue+0x1e>
		return FIFO_Null;
 800038c:	2303      	movs	r3, #3
 800038e:	e027      	b.n	80003e0 <FIFO_Deqeue+0x6e>

	// Empty FIFO(Nothing to deqeue)
	if(fifo->head == fifo->tail)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	685a      	ldr	r2, [r3, #4]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	429a      	cmp	r2, r3
 800039a:	d101      	bne.n	80003a0 <FIFO_Deqeue+0x2e>
		return FIFO_Empty;
 800039c:	2302      	movs	r3, #2
 800039e:	e01f      	b.n	80003e0 <FIFO_Deqeue+0x6e>

	*Item = *(fifo->head);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	601a      	str	r2, [r3, #0]
	fifo->counter--;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	1e5a      	subs	r2, r3, #1
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	601a      	str	r2, [r3, #0]


	// Circular deqeue
	if(fifo->head == ((uint32_t)fifo->base + (4*(fifo->length))))
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	68d2      	ldr	r2, [r2, #12]
 80003bc:	4611      	mov	r1, r2
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	6912      	ldr	r2, [r2, #16]
 80003c2:	0092      	lsls	r2, r2, #2
 80003c4:	440a      	add	r2, r1
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d104      	bne.n	80003d4 <FIFO_Deqeue+0x62>
		fifo->head = fifo->base;
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	68da      	ldr	r2, [r3, #12]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	e004      	b.n	80003de <FIFO_Deqeue+0x6c>
	else
		fifo->head++;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	1d1a      	adds	r2, r3, #4
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	605a      	str	r2, [r3, #4]

	return FIFO_No_Error;
 80003de:	2300      	movs	r3, #0

}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bc80      	pop	{r7}
 80003e8:	4770      	bx	lr
	...

080003ec <BubbleSort_SchedularTable>:
}SVC_ID;


// (Handler Mode)
void BubbleSort_SchedularTable()
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
	unsigned int i,j,n;
	Task_Config* TempTask;

	n = OS_Control.ActiveTasksNum;
 80003f2:	4b21      	ldr	r3, [pc, #132]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 80003f4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80003f8:	607b      	str	r3, [r7, #4]

	for(i=0 ; i<n-1 ; i++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
 80003fe:	e030      	b.n	8000462 <BubbleSort_SchedularTable+0x76>
	{
		for(j=0 ; j<n-i-1 ; j++)
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	e023      	b.n	800044e <BubbleSort_SchedularTable+0x62>
		{
			// Higher priority first
			if(OS_Control.OS_Tasks[j]->Priority > OS_Control.OS_Tasks[j+1]->Priority)
 8000406:	4a1c      	ldr	r2, [pc, #112]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800040e:	791a      	ldrb	r2, [r3, #4]
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	3301      	adds	r3, #1
 8000414:	4918      	ldr	r1, [pc, #96]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 8000416:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	d913      	bls.n	8000448 <BubbleSort_SchedularTable+0x5c>
			{
				TempTask = OS_Control.OS_Tasks[j];
 8000420:	4a15      	ldr	r2, [pc, #84]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000428:	603b      	str	r3, [r7, #0]
				OS_Control.OS_Tasks[j] = OS_Control.OS_Tasks[j+1];
 800042a:	68bb      	ldr	r3, [r7, #8]
 800042c:	3301      	adds	r3, #1
 800042e:	4a12      	ldr	r2, [pc, #72]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 8000430:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000434:	4910      	ldr	r1, [pc, #64]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control.OS_Tasks[j+1] = TempTask;
 800043c:	68bb      	ldr	r3, [r7, #8]
 800043e:	3301      	adds	r3, #1
 8000440:	490d      	ldr	r1, [pc, #52]	; (8000478 <BubbleSort_SchedularTable+0x8c>)
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(j=0 ; j<n-i-1 ; j++)
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	3301      	adds	r3, #1
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	1ad3      	subs	r3, r2, r3
 8000454:	3b01      	subs	r3, #1
 8000456:	68ba      	ldr	r2, [r7, #8]
 8000458:	429a      	cmp	r2, r3
 800045a:	d3d4      	bcc.n	8000406 <BubbleSort_SchedularTable+0x1a>
	for(i=0 ; i<n-1 ; i++)
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	3301      	adds	r3, #1
 8000460:	60fb      	str	r3, [r7, #12]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3b01      	subs	r3, #1
 8000466:	68fa      	ldr	r2, [r7, #12]
 8000468:	429a      	cmp	r2, r3
 800046a:	d3c9      	bcc.n	8000400 <BubbleSort_SchedularTable+0x14>
		}
	}



}
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	3714      	adds	r7, #20
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr
 8000478:	20000204 	.word	0x20000204

0800047c <MYRTOS_Update_SchedulerTable>:


// (Handler Mode)
void MYRTOS_Update_SchedulerTable()
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
	Task_Config* TempTaskDequeue = NULL;
 8000482:	2300      	movs	r3, #0
 8000484:	603b      	str	r3, [r7, #0]
	Task_Config *P_Task = NULL ,*P_nextTask = NULL;
 8000486:	2300      	movs	r3, #0
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
	int i = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]

	// Update Scheduler table

	// 1- Bubble Sort Sch_Table in OS_Control --> OS_Tasks[100]
	//    based on priority (high then low)
	BubbleSort_SchedularTable();
 8000492:	f7ff ffab 	bl	80003ec <BubbleSort_SchedularTable>

	// 2- Free Ready Queue
	while(FIFO_Deqeue(&ReadyQueue, &TempTaskDequeue /*Pointer to pointer*/) != FIFO_Empty);
 8000496:	bf00      	nop
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4828      	ldr	r0, [pc, #160]	; (8000540 <MYRTOS_Update_SchedulerTable+0xc4>)
 800049e:	f7ff ff68 	bl	8000372 <FIFO_Deqeue>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d1f7      	bne.n	8000498 <MYRTOS_Update_SchedulerTable+0x1c>


	// 3- Update Ready Queue
	while(i<OS_Control.ActiveTasksNum)
 80004a8:	e03d      	b.n	8000526 <MYRTOS_Update_SchedulerTable+0xaa>
	{
		P_Task = OS_Control.OS_Tasks[i];
 80004aa:	4a26      	ldr	r2, [pc, #152]	; (8000544 <MYRTOS_Update_SchedulerTable+0xc8>)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004b2:	60bb      	str	r3, [r7, #8]
		P_nextTask = OS_Control.OS_Tasks[i+1];
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	3301      	adds	r3, #1
 80004b8:	4a22      	ldr	r2, [pc, #136]	; (8000544 <MYRTOS_Update_SchedulerTable+0xc8>)
 80004ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004be:	607b      	str	r3, [r7, #4]

		if(P_Task->Task_State != Suspend){
 80004c0:	68bb      	ldr	r3, [r7, #8]
 80004c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d02a      	beq.n	8000520 <MYRTOS_Update_SchedulerTable+0xa4>
			// If we reached the end of the available Tasks
			// Then add the last one to the ready Queue and update its state
			// Because if we assumed its priority = 7, then the next one would be empty which is suspend(0) by default
			// Then we can't rely on the comparison of priority only

			if(P_nextTask->Task_State == Suspend)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d108      	bne.n	80004e6 <MYRTOS_Update_SchedulerTable+0x6a>
			{
				FIFO_Enqeue(&ReadyQueue, P_Task);
 80004d4:	68b9      	ldr	r1, [r7, #8]
 80004d6:	481a      	ldr	r0, [pc, #104]	; (8000540 <MYRTOS_Update_SchedulerTable+0xc4>)
 80004d8:	f7ff ff0a 	bl	80002f0 <FIFO_Enqeue>
				P_Task->Task_State = Ready;
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	2202      	movs	r2, #2
 80004e0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 80004e4:	e027      	b.n	8000536 <MYRTOS_Update_SchedulerTable+0xba>
			}

			// If the task is higher priority than the next one
			// Then add it to the readyQueue and break

			if(P_Task->Priority < P_nextTask->Priority)
 80004e6:	68bb      	ldr	r3, [r7, #8]
 80004e8:	791a      	ldrb	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d208      	bcs.n	8000504 <MYRTOS_Update_SchedulerTable+0x88>
			{
				FIFO_Enqeue(&ReadyQueue, P_Task);
 80004f2:	68b9      	ldr	r1, [r7, #8]
 80004f4:	4812      	ldr	r0, [pc, #72]	; (8000540 <MYRTOS_Update_SchedulerTable+0xc4>)
 80004f6:	f7ff fefb 	bl	80002f0 <FIFO_Enqeue>
				P_Task->Task_State = Ready;
 80004fa:	68bb      	ldr	r3, [r7, #8]
 80004fc:	2202      	movs	r2, #2
 80004fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
 8000502:	e018      	b.n	8000536 <MYRTOS_Update_SchedulerTable+0xba>
			}else if(P_Task->Priority == P_nextTask->Priority)
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	791a      	ldrb	r2, [r3, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	429a      	cmp	r2, r3
 800050e:	d111      	bne.n	8000534 <MYRTOS_Update_SchedulerTable+0xb8>
			{
				// In case of same priority (Round robin)
				// Then push P_Task, and make P_Task = P_nextTask, and P_nextTask++
				FIFO_Enqeue(&ReadyQueue, P_Task);
 8000510:	68b9      	ldr	r1, [r7, #8]
 8000512:	480b      	ldr	r0, [pc, #44]	; (8000540 <MYRTOS_Update_SchedulerTable+0xc4>)
 8000514:	f7ff feec 	bl	80002f0 <FIFO_Enqeue>
				P_Task->Task_State = Ready;
 8000518:	68bb      	ldr	r3, [r7, #8]
 800051a:	2202      	movs	r2, #2
 800051c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
				break;
			}
		}


		i++;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3301      	adds	r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
	while(i<OS_Control.ActiveTasksNum)
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <MYRTOS_Update_SchedulerTable+0xc8>)
 8000528:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	429a      	cmp	r2, r3
 8000530:	d8bb      	bhi.n	80004aa <MYRTOS_Update_SchedulerTable+0x2e>
	}

}
 8000532:	e000      	b.n	8000536 <MYRTOS_Update_SchedulerTable+0xba>
				break;
 8000534:	bf00      	nop
}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000020 	.word	0x20000020
 8000544:	20000204 	.word	0x20000204

08000548 <Decide_WhatNextTask>:



// (Handler Mode)
void Decide_WhatNextTask()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	// If ready Queue && OS_Control->CurrentTask != Suspend
	// Then make the current task run again till termination
	if((ReadyQueue.counter == 0) && (OS_Control.CurrentTaskExecuted->Task_State != Suspend))
 800054c:	4b23      	ldr	r3, [pc, #140]	; (80005dc <Decide_WhatNextTask+0x94>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d11a      	bne.n	800058a <Decide_WhatNextTask+0x42>
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <Decide_WhatNextTask+0x98>)
 8000556:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800055a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800055e:	2b00      	cmp	r3, #0
 8000560:	d013      	beq.n	800058a <Decide_WhatNextTask+0x42>
	{
		OS_Control.CurrentTaskExecuted->Task_State = Running;
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <Decide_WhatNextTask+0x98>)
 8000564:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000568:	2203      	movs	r2, #3
 800056a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		FIFO_Enqeue(&ReadyQueue, OS_Control.CurrentTaskExecuted);
 800056e:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <Decide_WhatNextTask+0x98>)
 8000570:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000574:	4619      	mov	r1, r3
 8000576:	4819      	ldr	r0, [pc, #100]	; (80005dc <Decide_WhatNextTask+0x94>)
 8000578:	f7ff feba 	bl	80002f0 <FIFO_Enqeue>
		// Make the current task next also, to run it again, if context switch happened
		OS_Control.NextTaskTobeExecuted = OS_Control.CurrentTaskExecuted;
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <Decide_WhatNextTask+0x98>)
 800057e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <Decide_WhatNextTask+0x98>)
 8000584:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
		{
			FIFO_Enqeue(&ReadyQueue, OS_Control.CurrentTaskExecuted);
			OS_Control.CurrentTaskExecuted->Task_State = Ready;
		}
	}
}
 8000588:	e025      	b.n	80005d6 <Decide_WhatNextTask+0x8e>
		FIFO_Deqeue(&ReadyQueue, &OS_Control.NextTaskTobeExecuted);
 800058a:	4916      	ldr	r1, [pc, #88]	; (80005e4 <Decide_WhatNextTask+0x9c>)
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <Decide_WhatNextTask+0x94>)
 800058e:	f7ff fef0 	bl	8000372 <FIFO_Deqeue>
		OS_Control.NextTaskTobeExecuted->Task_State = Running;
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <Decide_WhatNextTask+0x98>)
 8000594:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000598:	2203      	movs	r2, #3
 800059a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		if((OS_Control.CurrentTaskExecuted->Priority == OS_Control.NextTaskTobeExecuted->Priority) && (OS_Control.CurrentTaskExecuted != Suspend))
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <Decide_WhatNextTask+0x98>)
 80005a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005a4:	791a      	ldrb	r2, [r3, #4]
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <Decide_WhatNextTask+0x98>)
 80005a8:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d111      	bne.n	80005d6 <Decide_WhatNextTask+0x8e>
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <Decide_WhatNextTask+0x98>)
 80005b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d00c      	beq.n	80005d6 <Decide_WhatNextTask+0x8e>
			FIFO_Enqeue(&ReadyQueue, OS_Control.CurrentTaskExecuted);
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <Decide_WhatNextTask+0x98>)
 80005be:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <Decide_WhatNextTask+0x94>)
 80005c6:	f7ff fe93 	bl	80002f0 <FIFO_Enqeue>
			OS_Control.CurrentTaskExecuted->Task_State = Ready;
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <Decide_WhatNextTask+0x98>)
 80005cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80005d0:	2202      	movs	r2, #2
 80005d2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000020 	.word	0x20000020
 80005e0:	20000204 	.word	0x20000204
 80005e4:	200003a8 	.word	0x200003a8

080005e8 <OS_SVC_Services>:



// To execute specific OS service(Handler Mode)
void OS_SVC_Services(int* StackFramePointer)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	// OS_SVC_Set stack --> r0 = argument 0 = StackFramePointer
	// OS_SVC_Set stack --> r0,r1,r2,r3,r12,lr,pc,xpsr

	unsigned char SVC_Number;

	SVC_Number = *((unsigned char*)(((unsigned char*)StackFramePointer[6]) - 2));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3318      	adds	r3, #24
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b02      	subs	r3, #2
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	73fb      	strb	r3, [r7, #15]


	switch(SVC_Number)
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	dc02      	bgt.n	8000608 <OS_SVC_Services+0x20>
 8000602:	2b00      	cmp	r3, #0
 8000604:	da02      	bge.n	800060c <OS_SVC_Services+0x24>

	case SVC_TaskWaitingTime:
		break;
	}

}
 8000606:	e018      	b.n	800063a <OS_SVC_Services+0x52>
	switch(SVC_Number)
 8000608:	2b02      	cmp	r3, #2
		break;
 800060a:	e016      	b.n	800063a <OS_SVC_Services+0x52>
		MYRTOS_Update_SchedulerTable();
 800060c:	f7ff ff36 	bl	800047c <MYRTOS_Update_SchedulerTable>
		if(OS_Control.OS_Modes_ID == OS_Running)
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <OS_SVC_Services+0x5c>)
 8000612:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000616:	2b01      	cmp	r3, #1
 8000618:	d10e      	bne.n	8000638 <OS_SVC_Services+0x50>
			if(strcmp(OS_Control.CurrentTaskExecuted->TaskName,"idleTask")!=0)
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <OS_SVC_Services+0x5c>)
 800061c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000620:	3318      	adds	r3, #24
 8000622:	4909      	ldr	r1, [pc, #36]	; (8000648 <OS_SVC_Services+0x60>)
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff fda3 	bl	8000170 <strcmp>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <OS_SVC_Services+0x50>
				Decide_WhatNextTask();
 8000630:	f7ff ff8a 	bl	8000548 <Decide_WhatNextTask>
				Trigger_OS_PendSV();
 8000634:	f7ff fe08 	bl	8000248 <Trigger_OS_PendSV>
		break;
 8000638:	bf00      	nop
}
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000204 	.word	0x20000204
 8000648:	08000eb0 	.word	0x08000eb0

0800064c <PendSV_Handler>:
	 * Save context for the current task
	 ***********************************/

	// Get current task "Current PSP from CPU Register after pushing xpsr-->r0"
	// And put this value inside current PSP of the current task
	OS_GET_PSP(OS_Control.CurrentTaskExecuted->Current_PSP);
 800064c:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <PendSV_Handler+0x1b4>)
 800064e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000652:	f3ef 8009 	mrs	r0, PSP
 8000656:	4602      	mov	r2, r0
 8000658:	615a      	str	r2, [r3, #20]

	// Using this PSP(pointer in the current task) to store (R4 to R11)
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 800065a:	4b69      	ldr	r3, [pc, #420]	; (8000800 <PendSV_Handler+0x1b4>)
 800065c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000660:	695a      	ldr	r2, [r3, #20]
 8000662:	3a04      	subs	r2, #4
 8000664:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r4":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000666:	4b66      	ldr	r3, [pc, #408]	; (8000800 <PendSV_Handler+0x1b4>)
 8000668:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4622      	mov	r2, r4
 8000670:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 8000672:	4b63      	ldr	r3, [pc, #396]	; (8000800 <PendSV_Handler+0x1b4>)
 8000674:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	3a04      	subs	r2, #4
 800067c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r5":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800067e:	4b60      	ldr	r3, [pc, #384]	; (8000800 <PendSV_Handler+0x1b4>)
 8000680:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	462a      	mov	r2, r5
 8000688:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 800068a:	4b5d      	ldr	r3, [pc, #372]	; (8000800 <PendSV_Handler+0x1b4>)
 800068c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000690:	695a      	ldr	r2, [r3, #20]
 8000692:	3a04      	subs	r2, #4
 8000694:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r6":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000696:	4b5a      	ldr	r3, [pc, #360]	; (8000800 <PendSV_Handler+0x1b4>)
 8000698:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4632      	mov	r2, r6
 80006a0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006a2:	4b57      	ldr	r3, [pc, #348]	; (8000800 <PendSV_Handler+0x1b4>)
 80006a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006a8:	695a      	ldr	r2, [r3, #20]
 80006aa:	3a04      	subs	r2, #4
 80006ac:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r7":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006ae:	4b54      	ldr	r3, [pc, #336]	; (8000800 <PendSV_Handler+0x1b4>)
 80006b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	463a      	mov	r2, r7
 80006b8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006ba:	4b51      	ldr	r3, [pc, #324]	; (8000800 <PendSV_Handler+0x1b4>)
 80006bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	3a04      	subs	r2, #4
 80006c4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r8":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006c6:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <PendSV_Handler+0x1b4>)
 80006c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4642      	mov	r2, r8
 80006d0:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006d2:	4b4b      	ldr	r3, [pc, #300]	; (8000800 <PendSV_Handler+0x1b4>)
 80006d4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006d8:	695a      	ldr	r2, [r3, #20]
 80006da:	3a04      	subs	r2, #4
 80006dc:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r9":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006de:	4b48      	ldr	r3, [pc, #288]	; (8000800 <PendSV_Handler+0x1b4>)
 80006e0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	464a      	mov	r2, r9
 80006e8:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 80006ea:	4b45      	ldr	r3, [pc, #276]	; (8000800 <PendSV_Handler+0x1b4>)
 80006ec:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006f0:	695a      	ldr	r2, [r3, #20]
 80006f2:	3a04      	subs	r2, #4
 80006f4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r10":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80006f6:	4b42      	ldr	r3, [pc, #264]	; (8000800 <PendSV_Handler+0x1b4>)
 80006f8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4652      	mov	r2, sl
 8000700:	601a      	str	r2, [r3, #0]
	OS_Control.CurrentTaskExecuted->Current_PSP--;
 8000702:	4b3f      	ldr	r3, [pc, #252]	; (8000800 <PendSV_Handler+0x1b4>)
 8000704:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	3a04      	subs	r2, #4
 800070c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov %0,r11":"=r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800070e:	4b3c      	ldr	r3, [pc, #240]	; (8000800 <PendSV_Handler+0x1b4>)
 8000710:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	465a      	mov	r2, fp
 8000718:	601a      	str	r2, [r3, #0]
	/************************************
	 * Restore context for the next task
	 ***********************************/


	OS_Control.CurrentTaskExecuted = OS_Control.NextTaskTobeExecuted;
 800071a:	4b39      	ldr	r3, [pc, #228]	; (8000800 <PendSV_Handler+0x1b4>)
 800071c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000720:	4a37      	ldr	r2, [pc, #220]	; (8000800 <PendSV_Handler+0x1b4>)
 8000722:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	OS_Control.NextTaskTobeExecuted = NULL;
 8000726:	4b36      	ldr	r3, [pc, #216]	; (8000800 <PendSV_Handler+0x1b4>)
 8000728:	2200      	movs	r2, #0
 800072a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4


	__asm volatile("mov r11,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800072e:	4b34      	ldr	r3, [pc, #208]	; (8000800 <PendSV_Handler+0x1b4>)
 8000730:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	469b      	mov	fp, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 800073a:	4b31      	ldr	r3, [pc, #196]	; (8000800 <PendSV_Handler+0x1b4>)
 800073c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000740:	695a      	ldr	r2, [r3, #20]
 8000742:	3204      	adds	r2, #4
 8000744:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r10,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000746:	4b2e      	ldr	r3, [pc, #184]	; (8000800 <PendSV_Handler+0x1b4>)
 8000748:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	469a      	mov	sl, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 8000752:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <PendSV_Handler+0x1b4>)
 8000754:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000758:	695a      	ldr	r2, [r3, #20]
 800075a:	3204      	adds	r2, #4
 800075c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r9,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800075e:	4b28      	ldr	r3, [pc, #160]	; (8000800 <PendSV_Handler+0x1b4>)
 8000760:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4699      	mov	r9, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <PendSV_Handler+0x1b4>)
 800076c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000770:	695a      	ldr	r2, [r3, #20]
 8000772:	3204      	adds	r2, #4
 8000774:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r8,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <PendSV_Handler+0x1b4>)
 8000778:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4698      	mov	r8, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <PendSV_Handler+0x1b4>)
 8000784:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000788:	695a      	ldr	r2, [r3, #20]
 800078a:	3204      	adds	r2, #4
 800078c:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r7,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <PendSV_Handler+0x1b4>)
 8000790:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	461f      	mov	r7, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <PendSV_Handler+0x1b4>)
 800079c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	3204      	adds	r2, #4
 80007a4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r6,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <PendSV_Handler+0x1b4>)
 80007a8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	461e      	mov	r6, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <PendSV_Handler+0x1b4>)
 80007b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007b8:	695a      	ldr	r2, [r3, #20]
 80007ba:	3204      	adds	r2, #4
 80007bc:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r5,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <PendSV_Handler+0x1b4>)
 80007c0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	461d      	mov	r5, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <PendSV_Handler+0x1b4>)
 80007cc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007d0:	695a      	ldr	r2, [r3, #20]
 80007d2:	3204      	adds	r2, #4
 80007d4:	615a      	str	r2, [r3, #20]
	__asm volatile("mov r4,%0": : "r" (*(OS_Control.CurrentTaskExecuted->Current_PSP)));
 80007d6:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <PendSV_Handler+0x1b4>)
 80007d8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	461c      	mov	r4, r3
	OS_Control.CurrentTaskExecuted->Current_PSP++;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <PendSV_Handler+0x1b4>)
 80007e4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007e8:	695a      	ldr	r2, [r3, #20]
 80007ea:	3204      	adds	r2, #4
 80007ec:	615a      	str	r2, [r3, #20]


	// Update PSP to point to the task we want enter
	OS_SET_PSP(OS_Control.CurrentTaskExecuted->Current_PSP);
 80007ee:	4b04      	ldr	r3, [pc, #16]	; (8000800 <PendSV_Handler+0x1b4>)
 80007f0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80007f4:	695b      	ldr	r3, [r3, #20]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f380 8809 	msr	PSP, r0

	__asm volatile("BX LR") ;
 80007fc:	4770      	bx	lr
}
 80007fe:	bf00      	nop
 8000800:	20000204 	.word	0x20000204

08000804 <MYRTOS_Create_MainStack>:


void MYRTOS_Create_MainStack()
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
	OS_Control._S_MSP = &_estack;
 8000808:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <MYRTOS_Create_MainStack+0x34>)
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MYRTOS_Create_MainStack+0x38>)
 800080c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control._E_MSP = OS_Control._S_MSP - MainStackSize;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MYRTOS_Create_MainStack+0x38>)
 8000812:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000816:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <MYRTOS_Create_MainStack+0x38>)
 800081c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Align 8 Bytes space between Main stack and Process stack
	OS_Control.PSP_Task_Locator = (OS_Control._E_MSP - 8);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MYRTOS_Create_MainStack+0x38>)
 8000822:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000826:	3b08      	subs	r3, #8
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <MYRTOS_Create_MainStack+0x38>)
 800082a:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20002800 	.word	0x20002800
 800083c:	20000204 	.word	0x20000204

08000840 <MyRTOS_Idle_Task>:

uint8_t idleTaskIndication;

void MyRTOS_Idle_Task()
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	while(1)
	{
		idleTaskIndication^=1;
 8000844:	4b04      	ldr	r3, [pc, #16]	; (8000858 <MyRTOS_Idle_Task+0x18>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f083 0301 	eor.w	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b02      	ldr	r3, [pc, #8]	; (8000858 <MyRTOS_Idle_Task+0x18>)
 8000850:	701a      	strb	r2, [r3, #0]
		__asm("NOP");
 8000852:	bf00      	nop
		idleTaskIndication^=1;
 8000854:	e7f6      	b.n	8000844 <MyRTOS_Idle_Task+0x4>
 8000856:	bf00      	nop
 8000858:	200003b0 	.word	0x200003b0

0800085c <MYRTOS_Init>:
}



MYRTOS_errorID MYRTOS_Init()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]

	// Update OS Mode (Suspend)
	OS_Control.OS_Modes_ID = OS_Suspend;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MYRTOS_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Specify the Main stack for the OS
	MYRTOS_Create_MainStack();
 800086e:	f7ff ffc9 	bl	8000804 <MYRTOS_Create_MainStack>



	// Create OS Ready Queue
	if((FIFO_Init(&ReadyQueue, ReadyQueueFIFO, 100)) != FIFO_No_Error)
 8000872:	2264      	movs	r2, #100	; 0x64
 8000874:	4913      	ldr	r1, [pc, #76]	; (80008c4 <MYRTOS_Init+0x68>)
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <MYRTOS_Init+0x6c>)
 8000878:	f7ff fd18 	bl	80002ac <FIFO_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <MYRTOS_Init+0x2c>
		ErrorState += ReadyQueue_Init_Error;
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	3301      	adds	r3, #1
 8000886:	71fb      	strb	r3, [r7, #7]


	// Configure idle task
	strcpy(MYRTOS_IdleTask.TaskName,"idleTask");
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MYRTOS_Init+0x70>)
 800088a:	4a11      	ldr	r2, [pc, #68]	; (80008d0 <MYRTOS_Init+0x74>)
 800088c:	ca07      	ldmia	r2, {r0, r1, r2}
 800088e:	c303      	stmia	r3!, {r0, r1}
 8000890:	701a      	strb	r2, [r3, #0]
	MYRTOS_IdleTask.Priority = 255;    // The least priority
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MYRTOS_Init+0x78>)
 8000894:	22ff      	movs	r2, #255	; 0xff
 8000896:	711a      	strb	r2, [r3, #4]
	MYRTOS_IdleTask.P_TaskEntry = MyRTOS_Idle_Task;
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MYRTOS_Init+0x78>)
 800089a:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <MYRTOS_Init+0x7c>)
 800089c:	609a      	str	r2, [r3, #8]
	MYRTOS_IdleTask.Stack_Size = 300;  // Bytes
 800089e:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MYRTOS_Init+0x78>)
 80008a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008a4:	601a      	str	r2, [r3, #0]

	ErrorState += MYRTOS_Create_Task(&MYRTOS_IdleTask);
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MYRTOS_Init+0x78>)
 80008a8:	f000 f858 	bl	800095c <MYRTOS_Create_Task>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4413      	add	r3, r2
 80008b4:	71fb      	strb	r3, [r7, #7]

	return ErrorState;
 80008b6:	79fb      	ldrb	r3, [r7, #7]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000204 	.word	0x20000204
 80008c4:	20000034 	.word	0x20000034
 80008c8:	20000020 	.word	0x20000020
 80008cc:	200001dc 	.word	0x200001dc
 80008d0:	08000eb0 	.word	0x08000eb0
 80008d4:	200001c4 	.word	0x200001c4
 80008d8:	08000841 	.word	0x08000841

080008dc <MYRTOS_Create_Stack>:


void MYRTOS_Create_Stack(Task_Config* taskReference)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	 * 	- r0
	 *
	 * 	//// (Manually defined to save the value of registers (Manually pushed and restored))
	 * 	r5, r6, r7, r8, r9, r10, r11
	 */
	taskReference->Current_PSP = taskReference->_S_PSP_Task;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	615a      	str	r2, [r3, #20]

	taskReference->Current_PSP--;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	1f1a      	subs	r2, r3, #4
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = 0x01000000;  // Dummy psr (by default T=1 Thumb2) to avoid bus fault
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000900:	601a      	str	r2, [r3, #0]

	taskReference->Current_PSP--;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	1f1a      	subs	r2, r3, #4
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = (unsigned int)(taskReference->P_TaskEntry);   // PC value
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	601a      	str	r2, [r3, #0]

	taskReference->Current_PSP--;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	695b      	ldr	r3, [r3, #20]
 800091a:	1f1a      	subs	r2, r3, #4
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	615a      	str	r2, [r3, #20]
	*(taskReference->Current_PSP) = (unsigned int)(0xFFFFFFFD);   // (Dummy value)As if LR (This function came from interrupt
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f06f 0202 	mvn.w	r2, #2
 8000928:	601a      	str	r2, [r3, #0]

	// The rest is 13 registers we want to push with 0 for now
	for(int j=0;j<13;j++)
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	e00b      	b.n	8000948 <MYRTOS_Create_Stack+0x6c>
	{
		taskReference->Current_PSP--;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	1f1a      	subs	r2, r3, #4
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	615a      	str	r2, [r3, #20]
		*(taskReference->Current_PSP) = 0;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	695b      	ldr	r3, [r3, #20]
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
	for(int j=0;j<13;j++)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3301      	adds	r3, #1
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2b0c      	cmp	r3, #12
 800094c:	ddf0      	ble.n	8000930 <MYRTOS_Create_Stack+0x54>
	}
}
 800094e:	bf00      	nop
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
	...

0800095c <MYRTOS_Create_Task>:



MYRTOS_errorID MYRTOS_Create_Task(Task_Config* taskReference)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]

	// Create its own PS Stack
	taskReference->_S_PSP_Task = OS_Control.PSP_Task_Locator;
 8000968:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <MYRTOS_Create_Task+0x74>)
 800096a:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60da      	str	r2, [r3, #12]
	taskReference->_E_PSP_Task = taskReference->_S_PSP_Task -  taskReference->Stack_Size;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	68da      	ldr	r2, [r3, #12]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1ad2      	subs	r2, r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	611a      	str	r2, [r3, #16]

	// Check that task size isn't exceeding Process stack size
	if(taskReference->_E_PSP_Task < (uint8_t)(&_eheap))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	4a13      	ldr	r2, [pc, #76]	; (80009d4 <MYRTOS_Create_Task+0x78>)
 8000986:	b2d2      	uxtb	r2, r2
 8000988:	4293      	cmp	r3, r2
 800098a:	d201      	bcs.n	8000990 <MYRTOS_Create_Task+0x34>
		return Task_Exceeded_Stack_Size;
 800098c:	2302      	movs	r3, #2
 800098e:	e01b      	b.n	80009c8 <MYRTOS_Create_Task+0x6c>

	// Align 8 Byte for the next task PS stack
	OS_Control.PSP_Task_Locator = taskReference->_E_PSP_Task - 8;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	3b08      	subs	r3, #8
 8000996:	4a0e      	ldr	r2, [pc, #56]	; (80009d0 <MYRTOS_Create_Task+0x74>)
 8000998:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// - _eheap


	// Initialize PS Task Stack
	MYRTOS_Create_Stack(taskReference);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff9d 	bl	80008dc <MYRTOS_Create_Stack>

	// Update scheduler table
	OS_Control.OS_Tasks[OS_Control.ActiveTasksNum] = taskReference;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <MYRTOS_Create_Task+0x74>)
 80009a4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80009a8:	4909      	ldr	r1, [pc, #36]	; (80009d0 <MYRTOS_Create_Task+0x74>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control.ActiveTasksNum++;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MYRTOS_Create_Task+0x74>)
 80009b2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80009b6:	3301      	adds	r3, #1
 80009b8:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <MYRTOS_Create_Task+0x74>)
 80009ba:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	// Task state update (Suspend mode)
	taskReference->Task_State = Suspend;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return ErrorState;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]

}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000204 	.word	0x20000204
 80009d4:	200006b8 	.word	0x200006b8

080009d8 <MYRTOS_OS_SVC_Set>:




void MYRTOS_OS_SVC_Set(SVC_ID ID)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
	switch(ID)
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d00a      	beq.n	80009fe <MYRTOS_OS_SVC_Set+0x26>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	dc0a      	bgt.n	8000a02 <MYRTOS_OS_SVC_Set+0x2a>
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <MYRTOS_OS_SVC_Set+0x1e>
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d002      	beq.n	80009fa <MYRTOS_OS_SVC_Set+0x22>

	case SVC_TaskWaitingTime:
		__asm("svc #0x02");
		break;
	}
}
 80009f4:	e005      	b.n	8000a02 <MYRTOS_OS_SVC_Set+0x2a>
		__asm("svc #0x00");
 80009f6:	df00      	svc	0
		break;
 80009f8:	e003      	b.n	8000a02 <MYRTOS_OS_SVC_Set+0x2a>
		__asm("svc #0x01");
 80009fa:	df01      	svc	1
		break;
 80009fc:	e001      	b.n	8000a02 <MYRTOS_OS_SVC_Set+0x2a>
		__asm("svc #0x02");
 80009fe:	df02      	svc	2
		break;
 8000a00:	bf00      	nop
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <MYRTOS_Activate_Task>:




MYRTOS_errorID MYRTOS_Activate_Task(Task_Config* taskReference)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
	MYRTOS_errorID ErrorState = NO_ERROR;
 8000a14:	2300      	movs	r3, #0
 8000a16:	73fb      	strb	r3, [r7, #15]

	// Update task state
	taskReference->Task_State = Waiting;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36


	// Update Scheduler table
	MYRTOS_OS_SVC_Set(SVC_ActivateTask);
 8000a20:	2000      	movs	r0, #0
 8000a22:	f7ff ffd9 	bl	80009d8 <MYRTOS_OS_SVC_Set>



	return ErrorState;
 8000a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <MYRTOS_START_OS>:




void MYRTOS_START_OS()
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	OS_Control.OS_Modes_ID = OS_Running;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MYRTOS_START_OS+0x50>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
	// Set default "Current task == Idle task"
	OS_Control.CurrentTaskExecuted = &MYRTOS_IdleTask;
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MYRTOS_START_OS+0x50>)
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <MYRTOS_START_OS+0x54>)
 8000a40:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	// Activate Idle task
	MYRTOS_Activate_Task(&MYRTOS_IdleTask);
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <MYRTOS_START_OS+0x54>)
 8000a46:	f7ff ffe1 	bl	8000a0c <MYRTOS_Activate_Task>


	// Start ticker
	Start_Ticker();
 8000a4a:	f7ff fc14 	bl	8000276 <Start_Ticker>

	OS_SET_PSP(OS_Control.CurrentTaskExecuted->Current_PSP);
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MYRTOS_START_OS+0x50>)
 8000a50:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f380 8809 	msr	PSP, r0

	// Switch thread mode from MSP to PSP
	OS_SWITCH_SP_to_PSP;
 8000a5c:	f3ef 8014 	mrs	r0, CONTROL
 8000a60:	f040 0002 	orr.w	r0, r0, #2
 8000a64:	f380 8814 	msr	CONTROL, r0
	OS_SWITCH_TO_UNPRIVILIGE;
 8000a68:	f3ef 8314 	mrs	r3, CONTROL
 8000a6c:	f043 0301 	orr.w	r3, r3, #1
 8000a70:	f383 8814 	msr	CONTROL, r3
	MYRTOS_IdleTask.P_TaskEntry();
 8000a74:	4b03      	ldr	r3, [pc, #12]	; (8000a84 <MYRTOS_START_OS+0x54>)
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	4798      	blx	r3
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000204 	.word	0x20000204
 8000a84:	200001c4 	.word	0x200001c4

08000a88 <task1>:

uint8_t Task1Indication,Task2Indication,Task3Indication;


void task1()
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
	while(1){
		// Task1 Code
		Task1Indication^=1;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <task1+0x14>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f083 0301 	eor.w	r3, r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b01      	ldr	r3, [pc, #4]	; (8000a9c <task1+0x14>)
 8000a98:	701a      	strb	r2, [r3, #0]
 8000a9a:	e7f7      	b.n	8000a8c <task1+0x4>
 8000a9c:	20000474 	.word	0x20000474

08000aa0 <task2>:
	}
}

void task2()
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
	while(1){
		// Task1 Code
		Task2Indication^=1;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <task2+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f083 0301 	eor.w	r3, r3, #1
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b01      	ldr	r3, [pc, #4]	; (8000ab4 <task2+0x14>)
 8000ab0:	701a      	strb	r2, [r3, #0]
 8000ab2:	e7f7      	b.n	8000aa4 <task2+0x4>
 8000ab4:	20000475 	.word	0x20000475

08000ab8 <task3>:
	}
}

void task3()
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	while(1){
		// Task1 Code
		Task3Indication ^= 1;
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <task3+0x14>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	f083 0301 	eor.w	r3, r3, #1
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4b01      	ldr	r3, [pc, #4]	; (8000acc <task3+0x14>)
 8000ac8:	701a      	strb	r2, [r3, #0]
 8000aca:	e7f7      	b.n	8000abc <task3+0x4>
 8000acc:	20000476 	.word	0x20000476

08000ad0 <main>:
	}
}

int main(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	MYRTOS_errorID Error = NO_ERROR;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	// HW_Init	(Initialize clockTree, ResetController)
	HW_Init();
 8000ada:	f7ff fbc3 	bl	8000264 <HW_Init>

	if(MYRTOS_Init() != NO_ERROR)
 8000ade:	f7ff febd 	bl	800085c <MYRTOS_Init>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d000      	beq.n	8000aea <main+0x1a>
		while(1);
 8000ae8:	e7fe      	b.n	8000ae8 <main+0x18>


	// Create tasks
	Task1.Stack_Size = 1024;   // 1kByte
 8000aea:	4b30      	ldr	r3, [pc, #192]	; (8000bac <main+0xdc>)
 8000aec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000af0:	601a      	str	r2, [r3, #0]
	Task1.P_TaskEntry = task1;
 8000af2:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <main+0xdc>)
 8000af4:	4a2e      	ldr	r2, [pc, #184]	; (8000bb0 <main+0xe0>)
 8000af6:	609a      	str	r2, [r3, #8]
	Task1.Priority = 3;
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <main+0xdc>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	711a      	strb	r2, [r3, #4]
	strcpy(Task1.TaskName, "task_1");
 8000afe:	4b2d      	ldr	r3, [pc, #180]	; (8000bb4 <main+0xe4>)
 8000b00:	4a2d      	ldr	r2, [pc, #180]	; (8000bb8 <main+0xe8>)
 8000b02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b06:	6018      	str	r0, [r3, #0]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	8019      	strh	r1, [r3, #0]
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	0c0a      	lsrs	r2, r1, #16
 8000b10:	701a      	strb	r2, [r3, #0]

	Task2.Stack_Size = 1024;   // 1kByte
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <main+0xec>)
 8000b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b18:	601a      	str	r2, [r3, #0]
	Task2.P_TaskEntry = task2;
 8000b1a:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <main+0xec>)
 8000b1c:	4a28      	ldr	r2, [pc, #160]	; (8000bc0 <main+0xf0>)
 8000b1e:	609a      	str	r2, [r3, #8]
	Task2.Priority = 3;
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <main+0xec>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	711a      	strb	r2, [r3, #4]
	strcpy(Task2.TaskName, "task_2");
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <main+0xf4>)
 8000b28:	4a27      	ldr	r2, [pc, #156]	; (8000bc8 <main+0xf8>)
 8000b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b2e:	6018      	str	r0, [r3, #0]
 8000b30:	3304      	adds	r3, #4
 8000b32:	8019      	strh	r1, [r3, #0]
 8000b34:	3302      	adds	r3, #2
 8000b36:	0c0a      	lsrs	r2, r1, #16
 8000b38:	701a      	strb	r2, [r3, #0]

	Task3.Stack_Size = 1024;   // 1kByte
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <main+0xfc>)
 8000b3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b40:	601a      	str	r2, [r3, #0]
	Task3.P_TaskEntry = task3;
 8000b42:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <main+0xfc>)
 8000b44:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <main+0x100>)
 8000b46:	609a      	str	r2, [r3, #8]
	Task3.Priority = 7;
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <main+0xfc>)
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	711a      	strb	r2, [r3, #4]
	strcpy(Task3.TaskName, "task_3");
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <main+0x104>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <main+0x108>)
 8000b52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b56:	6018      	str	r0, [r3, #0]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	8019      	strh	r1, [r3, #0]
 8000b5c:	3302      	adds	r3, #2
 8000b5e:	0c0a      	lsrs	r2, r1, #16
 8000b60:	701a      	strb	r2, [r3, #0]

	Error += MYRTOS_Create_Task(&Task1);
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <main+0xdc>)
 8000b64:	f7ff fefa 	bl	800095c <MYRTOS_Create_Task>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4413      	add	r3, r2
 8000b70:	71fb      	strb	r3, [r7, #7]
	Error += MYRTOS_Create_Task(&Task2);
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <main+0xec>)
 8000b74:	f7ff fef2 	bl	800095c <MYRTOS_Create_Task>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	4413      	add	r3, r2
 8000b80:	71fb      	strb	r3, [r7, #7]
	Error += MYRTOS_Create_Task(&Task3);
 8000b82:	4812      	ldr	r0, [pc, #72]	; (8000bcc <main+0xfc>)
 8000b84:	f7ff feea 	bl	800095c <MYRTOS_Create_Task>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4413      	add	r3, r2
 8000b90:	71fb      	strb	r3, [r7, #7]

	MYRTOS_Activate_Task(&Task1);
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <main+0xdc>)
 8000b94:	f7ff ff3a 	bl	8000a0c <MYRTOS_Activate_Task>
	MYRTOS_Activate_Task(&Task2);
 8000b98:	4808      	ldr	r0, [pc, #32]	; (8000bbc <main+0xec>)
 8000b9a:	f7ff ff37 	bl	8000a0c <MYRTOS_Activate_Task>
	MYRTOS_Activate_Task(&Task3);
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <main+0xfc>)
 8000ba0:	f7ff ff34 	bl	8000a0c <MYRTOS_Activate_Task>

	MYRTOS_START_OS();
 8000ba4:	f7ff ff44 	bl	8000a30 <MYRTOS_START_OS>

	while(1)
 8000ba8:	e7fe      	b.n	8000ba8 <main+0xd8>
 8000baa:	bf00      	nop
 8000bac:	200003b4 	.word	0x200003b4
 8000bb0:	08000a89 	.word	0x08000a89
 8000bb4:	200003cc 	.word	0x200003cc
 8000bb8:	08000ebc 	.word	0x08000ebc
 8000bbc:	200003f4 	.word	0x200003f4
 8000bc0:	08000aa1 	.word	0x08000aa1
 8000bc4:	2000040c 	.word	0x2000040c
 8000bc8:	08000ec4 	.word	0x08000ec4
 8000bcc:	20000434 	.word	0x20000434
 8000bd0:	08000ab9 	.word	0x08000ab9
 8000bd4:	2000044c 	.word	0x2000044c
 8000bd8:	08000ecc 	.word	0x08000ecc

08000bdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bdc:	480d      	ldr	r0, [pc, #52]	; (8000c14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	; (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	; (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	; (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0a:	f000 f921 	bl	8000e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0e:	f7ff ff5f 	bl	8000ad0 <main>

08000c12 <LoopForever>:

LoopForever:
  b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   r0, =_estack
 8000c14:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c20:	08000edc 	.word	0x08000edc
  ldr r2, =_sbss
 8000c24:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c28:	200004b4 	.word	0x200004b4

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <EXTI0_IRQHandler>:

///////////////////////////////ISR ///////////////////////////////////////////


void EXTI0_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <EXTI0_IRQHandler+0x1c>)
 8000c36:	695b      	ldr	r3, [r3, #20]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <EXTI0_IRQHandler+0x1c>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <EXTI0_IRQHandler+0x20>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4798      	blx	r3

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010400 	.word	0x40010400
 8000c50:	20000478 	.word	0x20000478

08000c54 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <EXTI1_IRQHandler+0x1c>)
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <EXTI1_IRQHandler+0x1c>)
 8000c5e:	f043 0302 	orr.w	r3, r3, #2
 8000c62:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <EXTI1_IRQHandler+0x20>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4798      	blx	r3
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40010400 	.word	0x40010400
 8000c74:	20000478 	.word	0x20000478

08000c78 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <EXTI2_IRQHandler+0x1c>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <EXTI2_IRQHandler+0x1c>)
 8000c82:	f043 0304 	orr.w	r3, r3, #4
 8000c86:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <EXTI2_IRQHandler+0x20>)
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4798      	blx	r3
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010400 	.word	0x40010400
 8000c98:	20000478 	.word	0x20000478

08000c9c <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <EXTI3_IRQHandler+0x1c>)
 8000ca2:	695b      	ldr	r3, [r3, #20]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <EXTI3_IRQHandler+0x1c>)
 8000ca6:	f043 0308 	orr.w	r3, r3, #8
 8000caa:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <EXTI3_IRQHandler+0x20>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	4798      	blx	r3
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40010400 	.word	0x40010400
 8000cbc:	20000478 	.word	0x20000478

08000cc0 <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <EXTI4_IRQHandler+0x1c>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <EXTI4_IRQHandler+0x1c>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <EXTI4_IRQHandler+0x20>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4798      	blx	r3
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40010400 	.word	0x40010400
 8000ce0:	20000478 	.word	0x20000478

08000ce4 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8000ce8:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	f003 0320 	and.w	r3, r3, #32
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d008      	beq.n	8000d06 <EXTI9_5_IRQHandler+0x22>
 8000cf4:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000cfa:	f043 0320 	orr.w	r3, r3, #32
 8000cfe:	6153      	str	r3, [r2, #20]
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d02:	695b      	ldr	r3, [r3, #20]
 8000d04:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d08:	695b      	ldr	r3, [r3, #20]
 8000d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d008      	beq.n	8000d24 <EXTI9_5_IRQHandler+0x40>
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	4a1b      	ldr	r2, [pc, #108]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d1c:	6153      	str	r3, [r2, #20]
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d008      	beq.n	8000d42 <EXTI9_5_IRQHandler+0x5e>
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	6153      	str	r3, [r2, #20]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d3e:	69db      	ldr	r3, [r3, #28]
 8000d40:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 8000d42:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d008      	beq.n	8000d60 <EXTI9_5_IRQHandler+0x7c>
 8000d4e:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6153      	str	r3, [r2, #20]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d5c:	6a1b      	ldr	r3, [r3, #32]
 8000d5e:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d008      	beq.n	8000d7e <EXTI9_5_IRQHandler+0x9a>
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <EXTI9_5_IRQHandler+0xa0>)
 8000d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d76:	6153      	str	r3, [r2, #20]
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <EXTI9_5_IRQHandler+0xa4>)
 8000d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7c:	4798      	blx	r3
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40010400 	.word	0x40010400
 8000d88:	20000478 	.word	0x20000478

08000d8c <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 8000d90:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d008      	beq.n	8000dae <EXTI15_10_IRQHandler+0x22>
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4a29      	ldr	r2, [pc, #164]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000da2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da6:	6153      	str	r3, [r2, #20]
 8000da8:	4b28      	ldr	r3, [pc, #160]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dac:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 8000dae:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d008      	beq.n	8000dcc <EXTI15_10_IRQHandler+0x40>
 8000dba:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	4a22      	ldr	r2, [pc, #136]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc4:	6153      	str	r3, [r2, #20]
 8000dc6:	4b21      	ldr	r3, [pc, #132]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dca:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dce:	695b      	ldr	r3, [r3, #20]
 8000dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d008      	beq.n	8000dea <EXTI15_10_IRQHandler+0x5e>
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000de2:	6153      	str	r3, [r2, #20]
 8000de4:	4b19      	ldr	r3, [pc, #100]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d008      	beq.n	8000e08 <EXTI15_10_IRQHandler+0x7c>
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	4a13      	ldr	r2, [pc, #76]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e00:	6153      	str	r3, [r2, #20]
 8000e02:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e06:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d008      	beq.n	8000e26 <EXTI15_10_IRQHandler+0x9a>
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	4a0b      	ldr	r2, [pc, #44]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	6153      	str	r3, [r2, #20]
 8000e20:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e24:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d008      	beq.n	8000e44 <EXTI15_10_IRQHandler+0xb8>
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <EXTI15_10_IRQHandler+0xbc>)
 8000e38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <EXTI15_10_IRQHandler+0xc0>)
 8000e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e42:	4798      	blx	r3
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010400 	.word	0x40010400
 8000e4c:	20000478 	.word	0x20000478

08000e50 <__libc_init_array>:
 8000e50:	b570      	push	{r4, r5, r6, lr}
 8000e52:	2600      	movs	r6, #0
 8000e54:	4d0c      	ldr	r5, [pc, #48]	; (8000e88 <__libc_init_array+0x38>)
 8000e56:	4c0d      	ldr	r4, [pc, #52]	; (8000e8c <__libc_init_array+0x3c>)
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	10a4      	asrs	r4, r4, #2
 8000e5c:	42a6      	cmp	r6, r4
 8000e5e:	d109      	bne.n	8000e74 <__libc_init_array+0x24>
 8000e60:	f000 f81a 	bl	8000e98 <_init>
 8000e64:	2600      	movs	r6, #0
 8000e66:	4d0a      	ldr	r5, [pc, #40]	; (8000e90 <__libc_init_array+0x40>)
 8000e68:	4c0a      	ldr	r4, [pc, #40]	; (8000e94 <__libc_init_array+0x44>)
 8000e6a:	1b64      	subs	r4, r4, r5
 8000e6c:	10a4      	asrs	r4, r4, #2
 8000e6e:	42a6      	cmp	r6, r4
 8000e70:	d105      	bne.n	8000e7e <__libc_init_array+0x2e>
 8000e72:	bd70      	pop	{r4, r5, r6, pc}
 8000e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e78:	4798      	blx	r3
 8000e7a:	3601      	adds	r6, #1
 8000e7c:	e7ee      	b.n	8000e5c <__libc_init_array+0xc>
 8000e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e82:	4798      	blx	r3
 8000e84:	3601      	adds	r6, #1
 8000e86:	e7f2      	b.n	8000e6e <__libc_init_array+0x1e>
 8000e88:	08000ed4 	.word	0x08000ed4
 8000e8c:	08000ed4 	.word	0x08000ed4
 8000e90:	08000ed4 	.word	0x08000ed4
 8000e94:	08000ed8 	.word	0x08000ed8

08000e98 <_init>:
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	bf00      	nop
 8000e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e9e:	bc08      	pop	{r3}
 8000ea0:	469e      	mov	lr, r3
 8000ea2:	4770      	bx	lr

08000ea4 <_fini>:
 8000ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ea6:	bf00      	nop
 8000ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eaa:	bc08      	pop	{r3}
 8000eac:	469e      	mov	lr, r3
 8000eae:	4770      	bx	lr
