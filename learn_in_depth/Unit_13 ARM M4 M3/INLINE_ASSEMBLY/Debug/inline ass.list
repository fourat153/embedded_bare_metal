
inline ass.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a0c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b48  08000b48  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000b48  08000b48  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b48  08000b48  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b48  08000b48  00010b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000008  08000b58  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000b58  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d68  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000042c  00000000  00000000  00020ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000006cc  00000000  00000000  00021208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000130  00000000  00000000  000218d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000000d8  00000000  00000000  00021a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000021c7  00000000  00000000  00021ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001951  00000000  00000000  00023ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009234  00000000  00000000  000255f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003a4  00000000  00000000  0002e82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  0002ebd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00000019  00000000  00000000  0002ec55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b24 	.word	0x08000b24

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08000b24 	.word	0x08000b24

08000170 <EXTI9_CallBack>:


uint16_t IRQ_Flag = 0;
int x = 0 ;
void EXTI9_CallBack(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <EXTI9_CallBack+0x24>)
 8000176:	2201      	movs	r2, #1
 8000178:	801a      	strh	r2, [r3, #0]
	__asm("nop\n \t nop");
 800017a:	bf00      	nop
 800017c:	bf00      	nop
	__asm("MRS %0,IPSR"
 800017e:	f3ef 8305 	mrs	r3, IPSR
 8000182:	4a05      	ldr	r2, [pc, #20]	; (8000198 <EXTI9_CallBack+0x28>)
 8000184:	6013      	str	r3, [r2, #0]
					: "=r"(x));
	__asm("nop\n \t nop");
 8000186:	bf00      	nop
 8000188:	bf00      	nop
}
 800018a:	bf00      	nop
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000024 	.word	0x20000024
 8000198:	20000028 	.word	0x20000028

0800019c <main>:
int out ;
int in = 1 ;
int in2 = 2 ;
int CONTROL_Regist_value;
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b088      	sub	sp, #32
 80001a0:	af00      	add	r7, sp, #0

	RCC_GPIOB_CLK_EN();
 80001a2:	4b2b      	ldr	r3, [pc, #172]	; (8000250 <main+0xb4>)
 80001a4:	699b      	ldr	r3, [r3, #24]
 80001a6:	4a2a      	ldr	r2, [pc, #168]	; (8000250 <main+0xb4>)
 80001a8:	f043 0308 	orr.w	r3, r3, #8
 80001ac:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80001ae:	4b28      	ldr	r3, [pc, #160]	; (8000250 <main+0xb4>)
 80001b0:	699b      	ldr	r3, [r3, #24]
 80001b2:	4a27      	ldr	r2, [pc, #156]	; (8000250 <main+0xb4>)
 80001b4:	f043 0301 	orr.w	r3, r3, #1
 80001b8:	6193      	str	r3, [r2, #24]


	EXTI_PinConfig_t EXTI_Cfg;
	EXTI_Cfg.EXTI_PIN = EXTI9PB9;
 80001ba:	4a26      	ldr	r2, [pc, #152]	; (8000254 <main+0xb8>)
 80001bc:	f107 030c 	add.w	r3, r7, #12
 80001c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80001c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_Cfg.TriggerCase = EXTI_Trigger_RISING;
 80001c6:	2300      	movs	r3, #0
 80001c8:	763b      	strb	r3, [r7, #24]
	EXTI_Cfg.P_IRQ_CallBack = EXTI9_CallBack;
 80001ca:	4b23      	ldr	r3, [pc, #140]	; (8000258 <main+0xbc>)
 80001cc:	61fb      	str	r3, [r7, #28]
	EXTI_Cfg.IRQ_Enable = EXTI_IRQ_Enable;
 80001ce:	2301      	movs	r3, #1
 80001d0:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_Init(&EXTI_Cfg);
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fa2c 	bl	8000634 <MCAL_EXTI_GPIO_Init>

/*************lab1 non input or output************************/
	__asm("nop\n \t nop");
 80001dc:	bf00      	nop
 80001de:	bf00      	nop
	__asm("nop\n \t nop");
 80001e0:	bf00      	nop
 80001e2:	bf00      	nop

///////////////////////////////////////////////
//  ass code : destination out : source input//
///////////////////////////////////////////////

	__asm("mov %0, #0xff"    // move 0xff to a register choosen by th cpu
 80001e4:	f04f 03ff 	mov.w	r3, #255	; 0xff
 80001e8:	4a1c      	ldr	r2, [pc, #112]	; (800025c <main+0xc0>)
 80001ea:	6013      	str	r3, [r2, #0]
		:"=r" (out));        // compiler will generate a code store the result of 0xff into the adress of register that contain
							// variable  out
	__asm("nop\n \t nop");
 80001ec:	bf00      	nop
 80001ee:	bf00      	nop
/*************lab3 ************************/
	__asm("mov R0,%0 "    // move data in the register choosen by th cpu into the r0
 80001f0:	4b1b      	ldr	r3, [pc, #108]	; (8000260 <main+0xc4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
		:
		: "r" (in));        // compiler will generate a code store the value  into the r0 of register into in variable

	__asm("nop\n \t nop");
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop

/*************lab4 ************************/
	out = 0  ;
 80001fa:	4b18      	ldr	r3, [pc, #96]	; (800025c <main+0xc0>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	601a      	str	r2, [r3, #0]
	in = 1 ;
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <main+0xc4>)
 8000202:	2201      	movs	r2, #1
 8000204:	601a      	str	r2, [r3, #0]
	in2 = 2 ;
 8000206:	4b17      	ldr	r3, [pc, #92]	; (8000264 <main+0xc8>)
 8000208:	2202      	movs	r2, #2
 800020a:	601a      	str	r2, [r3, #0]
	__asm("nop\n \t nop");
 800020c:	bf00      	nop
 800020e:	bf00      	nop

	__asm("add %0,%1,%2"
 8000210:	4b13      	ldr	r3, [pc, #76]	; (8000260 <main+0xc4>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a13      	ldr	r2, [pc, #76]	; (8000264 <main+0xc8>)
 8000216:	6812      	ldr	r2, [r2, #0]
 8000218:	4413      	add	r3, r2
 800021a:	4a10      	ldr	r2, [pc, #64]	; (800025c <main+0xc0>)
 800021c:	6013      	str	r3, [r2, #0]
		: "=r"(out)
		: "r"(in) , "r"(in2));

	__asm("nop\n \t nop");
 800021e:	bf00      	nop
 8000220:	bf00      	nop

/*****************lab5********************/
// Naming Conventional same as the last one
		__asm("add %[Out0], %[in0], %[in1]"
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <main+0xc4>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <main+0xc8>)
 8000228:	6812      	ldr	r2, [r2, #0]
 800022a:	4413      	add	r3, r2
 800022c:	4a0b      	ldr	r2, [pc, #44]	; (800025c <main+0xc0>)
 800022e:	6013      	str	r3, [r2, #0]
				:[Out0] "=r" (out)
				 :[in0] "r" (in),
				  [in1] "r" (in2));
/****************lab6*******************/
	__asm("MRS %[Cont],CONTROL"
 8000230:	f3ef 8314 	mrs	r3, CONTROL
 8000234:	4a0c      	ldr	r2, [pc, #48]	; (8000268 <main+0xcc>)
 8000236:	6013      	str	r3, [r2, #0]
				:[Cont] "=r"(CONTROL_Regist_value));



	IRQ_Flag = 1;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <main+0xd0>)
 800023a:	2201      	movs	r2, #1
 800023c:	801a      	strh	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <main+0xd0>)
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0fb      	beq.n	800023e <main+0xa2>
		{

			IRQ_Flag = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <main+0xd0>)
 8000248:	2200      	movs	r2, #0
 800024a:	801a      	strh	r2, [r3, #0]
		if(IRQ_Flag)
 800024c:	e7f7      	b.n	800023e <main+0xa2>
 800024e:	bf00      	nop
 8000250:	40021000 	.word	0x40021000
 8000254:	08000b3c 	.word	0x08000b3c
 8000258:	08000171 	.word	0x08000171
 800025c:	2000002c 	.word	0x2000002c
 8000260:	20000000 	.word	0x20000000
 8000264:	20000004 	.word	0x20000004
 8000268:	20000030 	.word	0x20000030
 800026c:	20000024 	.word	0x20000024

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 fc1d 	bl	8000adc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ff7b 	bl	800019c <main>

080002a6 <LoopForever>:

LoopForever:
  b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80002b4:	08000b50 	.word	0x08000b50
  ldr r2, =_sbss
 80002b8:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80002bc:	20000070 	.word	0x20000070

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <Enable_NVIC>:
 *   Functions
 *  ****************  */


void Enable_NVIC(uint16_t IRQ)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	2b0f      	cmp	r3, #15
 80002d2:	d854      	bhi.n	800037e <Enable_NVIC+0xba>
 80002d4:	a201      	add	r2, pc, #4	; (adr r2, 80002dc <Enable_NVIC+0x18>)
 80002d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002da:	bf00      	nop
 80002dc:	0800031d 	.word	0x0800031d
 80002e0:	0800032b 	.word	0x0800032b
 80002e4:	08000339 	.word	0x08000339
 80002e8:	08000347 	.word	0x08000347
 80002ec:	08000355 	.word	0x08000355
 80002f0:	08000363 	.word	0x08000363
 80002f4:	08000363 	.word	0x08000363
 80002f8:	08000363 	.word	0x08000363
 80002fc:	08000363 	.word	0x08000363
 8000300:	08000363 	.word	0x08000363
 8000304:	08000371 	.word	0x08000371
 8000308:	08000371 	.word	0x08000371
 800030c:	08000371 	.word	0x08000371
 8000310:	08000371 	.word	0x08000371
 8000314:	08000371 	.word	0x08000371
 8000318:	08000371 	.word	0x08000371
	{
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 800031c:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <Enable_NVIC+0xc4>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a19      	ldr	r2, [pc, #100]	; (8000388 <Enable_NVIC+0xc4>)
 8000322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000326:	6013      	str	r3, [r2, #0]
		break;
 8000328:	e029      	b.n	800037e <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <Enable_NVIC+0xc4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a16      	ldr	r2, [pc, #88]	; (8000388 <Enable_NVIC+0xc4>)
 8000330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000334:	6013      	str	r3, [r2, #0]
		break;
 8000336:	e022      	b.n	800037e <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <Enable_NVIC+0xc4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a12      	ldr	r2, [pc, #72]	; (8000388 <Enable_NVIC+0xc4>)
 800033e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000342:	6013      	str	r3, [r2, #0]
		break;
 8000344:	e01b      	b.n	800037e <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <Enable_NVIC+0xc4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a0f      	ldr	r2, [pc, #60]	; (8000388 <Enable_NVIC+0xc4>)
 800034c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000350:	6013      	str	r3, [r2, #0]
		break;
 8000352:	e014      	b.n	800037e <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <Enable_NVIC+0xc4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <Enable_NVIC+0xc4>)
 800035a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800035e:	6013      	str	r3, [r2, #0]
		break;
 8000360:	e00d      	b.n	800037e <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <Enable_NVIC+0xc4>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a08      	ldr	r2, [pc, #32]	; (8000388 <Enable_NVIC+0xc4>)
 8000368:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800036c:	6013      	str	r3, [r2, #0]
		break;
 800036e:	e006      	b.n	800037e <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <Enable_NVIC+0xc8>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a05      	ldr	r2, [pc, #20]	; (800038c <Enable_NVIC+0xc8>)
 8000376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800037a:	6013      	str	r3, [r2, #0]
		break;
 800037c:	bf00      	nop
	}
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	e000e100 	.word	0xe000e100
 800038c:	e000e104 	.word	0xe000e104

08000390 <Disable_NVIC>:


void Disable_NVIC(uint16_t IRQ)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b0f      	cmp	r3, #15
 800039e:	d854      	bhi.n	800044a <Disable_NVIC+0xba>
 80003a0:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <Disable_NVIC+0x18>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003e9 	.word	0x080003e9
 80003ac:	080003f7 	.word	0x080003f7
 80003b0:	08000405 	.word	0x08000405
 80003b4:	08000413 	.word	0x08000413
 80003b8:	08000421 	.word	0x08000421
 80003bc:	0800042f 	.word	0x0800042f
 80003c0:	0800042f 	.word	0x0800042f
 80003c4:	0800042f 	.word	0x0800042f
 80003c8:	0800042f 	.word	0x0800042f
 80003cc:	0800042f 	.word	0x0800042f
 80003d0:	0800043d 	.word	0x0800043d
 80003d4:	0800043d 	.word	0x0800043d
 80003d8:	0800043d 	.word	0x0800043d
 80003dc:	0800043d 	.word	0x0800043d
 80003e0:	0800043d 	.word	0x0800043d
 80003e4:	0800043d 	.word	0x0800043d
	{
	case 0:
		NVIC_IRQ6_EXTI0_Disable;
 80003e8:	4b1a      	ldr	r3, [pc, #104]	; (8000454 <Disable_NVIC+0xc4>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a19      	ldr	r2, [pc, #100]	; (8000454 <Disable_NVIC+0xc4>)
 80003ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003f2:	6013      	str	r3, [r2, #0]
		break;
 80003f4:	e029      	b.n	800044a <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Disable;
 80003f6:	4b17      	ldr	r3, [pc, #92]	; (8000454 <Disable_NVIC+0xc4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a16      	ldr	r2, [pc, #88]	; (8000454 <Disable_NVIC+0xc4>)
 80003fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000400:	6013      	str	r3, [r2, #0]
		break;
 8000402:	e022      	b.n	800044a <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Disable;
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <Disable_NVIC+0xc4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a12      	ldr	r2, [pc, #72]	; (8000454 <Disable_NVIC+0xc4>)
 800040a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800040e:	6013      	str	r3, [r2, #0]
		break;
 8000410:	e01b      	b.n	800044a <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Disable;
 8000412:	4b10      	ldr	r3, [pc, #64]	; (8000454 <Disable_NVIC+0xc4>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a0f      	ldr	r2, [pc, #60]	; (8000454 <Disable_NVIC+0xc4>)
 8000418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800041c:	6013      	str	r3, [r2, #0]
		break;
 800041e:	e014      	b.n	800044a <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Disable;
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <Disable_NVIC+0xc4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a0b      	ldr	r2, [pc, #44]	; (8000454 <Disable_NVIC+0xc4>)
 8000426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800042a:	6013      	str	r3, [r2, #0]
		break;
 800042c:	e00d      	b.n	800044a <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable;
 800042e:	4b09      	ldr	r3, [pc, #36]	; (8000454 <Disable_NVIC+0xc4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a08      	ldr	r2, [pc, #32]	; (8000454 <Disable_NVIC+0xc4>)
 8000434:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000438:	6013      	str	r3, [r2, #0]
		break;
 800043a:	e006      	b.n	800044a <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <Disable_NVIC+0xc8>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <Disable_NVIC+0xc8>)
 8000442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000446:	6013      	str	r3, [r2, #0]
		break;
 8000448:	bf00      	nop
	}
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr
 8000454:	e000e180 	.word	0xe000e180
 8000458:	e000e184 	.word	0xe000e184

0800045c <Update_EXTI>:



void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b084      	sub	sp, #16
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	// 1- Configure GPIO to be AF input --> Floating input from data sheet

	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_Pin;
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	891b      	ldrh	r3, [r3, #8]
 8000468:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 800046a:	2308      	movs	r3, #8
 800046c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	f107 0208 	add.w	r2, r7, #8
 8000476:	4611      	mov	r1, r2
 8000478:	4618      	mov	r0, r3
 800047a:	f000 faaf 	bl	80009dc <MCAL_GPIO_Init>

	// ----------------------------------------------------------

	// 2- Update AFIO to route between EXTI line with PORT A,B,C,D

	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTI_lineNumber / 4;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	881b      	ldrh	r3, [r3, #0]
 8000482:	089b      	lsrs	r3, r3, #2
 8000484:	b29b      	uxth	r3, r3
 8000486:	73fb      	strb	r3, [r7, #15]

	uint8_t AFIO_EXTICR_ShiftPosition =  (EXTI_Config->EXTI_PIN.EXTI_lineNumber % 4) * 4; // 15 exti for every port 
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	881b      	ldrh	r3, [r3, #0]
 800048c:	b2db      	uxtb	r3, r3
 800048e:	f003 0303 	and.w	r3, r3, #3
 8000492:	b2db      	uxtb	r3, r3
 8000494:	009b      	lsls	r3, r3, #2
 8000496:	73bb      	strb	r3, [r7, #14]


	// Clear the four bit to write on
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_ShiftPosition);
 8000498:	4a5f      	ldr	r2, [pc, #380]	; (8000618 <Update_EXTI+0x1bc>)
 800049a:	7bfb      	ldrb	r3, [r7, #15]
 800049c:	3302      	adds	r3, #2
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	210f      	movs	r1, #15
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	43db      	mvns	r3, r3
 80004ac:	4618      	mov	r0, r3
 80004ae:	495a      	ldr	r1, [pc, #360]	; (8000618 <Update_EXTI+0x1bc>)
 80004b0:	7bfb      	ldrb	r3, [r7, #15]
 80004b2:	4002      	ands	r2, r0
 80004b4:	3302      	adds	r3, #2
 80004b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0XF) << AFIO_EXTICR_ShiftPosition);
 80004ba:	4a57      	ldr	r2, [pc, #348]	; (8000618 <Update_EXTI+0x1bc>)
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	3302      	adds	r3, #2
 80004c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4954      	ldr	r1, [pc, #336]	; (800061c <Update_EXTI+0x1c0>)
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d016      	beq.n	80004fc <Update_EXTI+0xa0>
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	4953      	ldr	r1, [pc, #332]	; (8000620 <Update_EXTI+0x1c4>)
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d00f      	beq.n	80004f8 <Update_EXTI+0x9c>
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	4951      	ldr	r1, [pc, #324]	; (8000624 <Update_EXTI+0x1c8>)
 80004de:	428b      	cmp	r3, r1
 80004e0:	d008      	beq.n	80004f4 <Update_EXTI+0x98>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	4950      	ldr	r1, [pc, #320]	; (8000628 <Update_EXTI+0x1cc>)
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d101      	bne.n	80004f0 <Update_EXTI+0x94>
 80004ec:	2303      	movs	r3, #3
 80004ee:	e006      	b.n	80004fe <Update_EXTI+0xa2>
 80004f0:	2300      	movs	r3, #0
 80004f2:	e004      	b.n	80004fe <Update_EXTI+0xa2>
 80004f4:	2302      	movs	r3, #2
 80004f6:	e002      	b.n	80004fe <Update_EXTI+0xa2>
 80004f8:	2301      	movs	r3, #1
 80004fa:	e000      	b.n	80004fe <Update_EXTI+0xa2>
 80004fc:	2300      	movs	r3, #0
 80004fe:	7bb9      	ldrb	r1, [r7, #14]
 8000500:	408b      	lsls	r3, r1
 8000502:	4618      	mov	r0, r3
 8000504:	4944      	ldr	r1, [pc, #272]	; (8000618 <Update_EXTI+0x1bc>)
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	4302      	orrs	r2, r0
 800050a:	3302      	adds	r3, #2
 800050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	// 3- Update Rising or falling edge

	// First clear them then writing
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000510:	4b46      	ldr	r3, [pc, #280]	; (800062c <Update_EXTI+0x1d0>)
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	4611      	mov	r1, r2
 800051a:	2201      	movs	r2, #1
 800051c:	408a      	lsls	r2, r1
 800051e:	43d2      	mvns	r2, r2
 8000520:	4611      	mov	r1, r2
 8000522:	4a42      	ldr	r2, [pc, #264]	; (800062c <Update_EXTI+0x1d0>)
 8000524:	400b      	ands	r3, r1
 8000526:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000528:	4b40      	ldr	r3, [pc, #256]	; (800062c <Update_EXTI+0x1d0>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	687a      	ldr	r2, [r7, #4]
 800052e:	8812      	ldrh	r2, [r2, #0]
 8000530:	4611      	mov	r1, r2
 8000532:	2201      	movs	r2, #1
 8000534:	408a      	lsls	r2, r1
 8000536:	43d2      	mvns	r2, r2
 8000538:	4611      	mov	r1, r2
 800053a:	4a3c      	ldr	r2, [pc, #240]	; (800062c <Update_EXTI+0x1d0>)
 800053c:	400b      	ands	r3, r1
 800053e:	60d3      	str	r3, [r2, #12]

	// Update them
	if(EXTI_Config->TriggerCase == EXTI_Trigger_RISING)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	7b1b      	ldrb	r3, [r3, #12]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d10b      	bne.n	8000560 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000548:	4b38      	ldr	r3, [pc, #224]	; (800062c <Update_EXTI+0x1d0>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	8812      	ldrh	r2, [r2, #0]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	4611      	mov	r1, r2
 8000558:	4a34      	ldr	r2, [pc, #208]	; (800062c <Update_EXTI+0x1d0>)
 800055a:	430b      	orrs	r3, r1
 800055c:	6093      	str	r3, [r2, #8]
 800055e:	e029      	b.n	80005b4 <Update_EXTI+0x158>
	}else if(EXTI_Config->TriggerCase == EXTI_Trigger_FALLING)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	7b1b      	ldrb	r3, [r3, #12]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d10b      	bne.n	8000580 <Update_EXTI+0x124>
	{
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <Update_EXTI+0x1d0>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	687a      	ldr	r2, [r7, #4]
 800056e:	8812      	ldrh	r2, [r2, #0]
 8000570:	4611      	mov	r1, r2
 8000572:	2201      	movs	r2, #1
 8000574:	408a      	lsls	r2, r1
 8000576:	4611      	mov	r1, r2
 8000578:	4a2c      	ldr	r2, [pc, #176]	; (800062c <Update_EXTI+0x1d0>)
 800057a:	430b      	orrs	r3, r1
 800057c:	60d3      	str	r3, [r2, #12]
 800057e:	e019      	b.n	80005b4 <Update_EXTI+0x158>
	}else if(EXTI_Config->TriggerCase == EXTI_Trigger_RISINGANDFALLING)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7b1b      	ldrb	r3, [r3, #12]
 8000584:	2b02      	cmp	r3, #2
 8000586:	d115      	bne.n	80005b4 <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <Update_EXTI+0x1d0>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	8812      	ldrh	r2, [r2, #0]
 8000590:	4611      	mov	r1, r2
 8000592:	2201      	movs	r2, #1
 8000594:	408a      	lsls	r2, r1
 8000596:	4611      	mov	r1, r2
 8000598:	4a24      	ldr	r2, [pc, #144]	; (800062c <Update_EXTI+0x1d0>)
 800059a:	430b      	orrs	r3, r1
 800059c:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <Update_EXTI+0x1d0>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	8812      	ldrh	r2, [r2, #0]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a1f      	ldr	r2, [pc, #124]	; (800062c <Update_EXTI+0x1d0>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]


	// 4- Update IRQ handling CallBack


	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_lineNumber] = EXTI_Config->P_IRQ_CallBack;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	691b      	ldr	r3, [r3, #16]
 80005be:	4a1c      	ldr	r2, [pc, #112]	; (8000630 <Update_EXTI+0x1d4>)
 80005c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	// 5- Enable or disable IRQ EXTI & NVIC


	if(EXTI_Config->IRQ_Enable == EXTI_IRQ_Enable)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	7b5b      	ldrb	r3, [r3, #13]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d110      	bne.n	80005ee <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1<<EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <Update_EXTI+0x1d0>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	8812      	ldrh	r2, [r2, #0]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <Update_EXTI+0x1d0>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	881b      	ldrh	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fe6c 	bl	80002c4 <Enable_NVIC>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_lineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_lineNumber);
	}


}
 80005ec:	e010      	b.n	8000610 <Update_EXTI+0x1b4>
		EXTI->IMR &= ~(1<<EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <Update_EXTI+0x1d0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	8812      	ldrh	r2, [r2, #0]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	43d2      	mvns	r2, r2
 80005fe:	4611      	mov	r1, r2
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <Update_EXTI+0x1d0>)
 8000602:	400b      	ands	r3, r1
 8000604:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_lineNumber);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fec0 	bl	8000390 <Disable_NVIC>
}
 8000610:	bf00      	nop
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40010000 	.word	0x40010000
 800061c:	40010800 	.word	0x40010800
 8000620:	40010c00 	.word	0x40010c00
 8000624:	40011000 	.word	0x40011000
 8000628:	40011400 	.word	0x40011400
 800062c:	40010400 	.word	0x40010400
 8000630:	20000034 	.word	0x20000034

08000634 <MCAL_EXTI_GPIO_Init>:
 */



void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ff0d 	bl	800045c <Update_EXTI>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <EXTI0_IRQHandler>:

///////////////////////////////ISR ///////////////////////////////////////////


void EXTI0_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0

	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<0;
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <EXTI0_IRQHandler+0x1c>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <EXTI0_IRQHandler+0x1c>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[0]();
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <EXTI0_IRQHandler+0x20>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4798      	blx	r3

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40010400 	.word	0x40010400
 800066c:	20000034 	.word	0x20000034

08000670 <EXTI1_IRQHandler>:


void EXTI1_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<1;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <EXTI1_IRQHandler+0x1c>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	4a04      	ldr	r2, [pc, #16]	; (800068c <EXTI1_IRQHandler+0x1c>)
 800067a:	f043 0302 	orr.w	r3, r3, #2
 800067e:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[1]();
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <EXTI1_IRQHandler+0x20>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	4798      	blx	r3
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40010400 	.word	0x40010400
 8000690:	20000034 	.word	0x20000034

08000694 <EXTI2_IRQHandler>:


void EXTI2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<2;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <EXTI2_IRQHandler+0x1c>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <EXTI2_IRQHandler+0x1c>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[2]();
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <EXTI2_IRQHandler+0x20>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	4798      	blx	r3
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40010400 	.word	0x40010400
 80006b4:	20000034 	.word	0x20000034

080006b8 <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<3;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <EXTI3_IRQHandler+0x1c>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <EXTI3_IRQHandler+0x1c>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[3]();
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <EXTI3_IRQHandler+0x20>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	4798      	blx	r3
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40010400 	.word	0x40010400
 80006d8:	20000034 	.word	0x20000034

080006dc <EXTI4_IRQHandler>:



void EXTI4_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	// Clear pending register by writing '1' into the bit
	EXTI->PR |= 1<<4;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <EXTI4_IRQHandler+0x1c>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <EXTI4_IRQHandler+0x1c>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6153      	str	r3, [r2, #20]

	// Call IRQ_CallBack
	GP_IRQ_CallBack[4]();
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <EXTI4_IRQHandler+0x20>)
 80006ee:	691b      	ldr	r3, [r3, #16]
 80006f0:	4798      	blx	r3
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40010400 	.word	0x40010400
 80006fc:	20000034 	.word	0x20000034

08000700 <EXTI9_5_IRQHandler>:



void EXTI9_5_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<5){ EXTI->PR |= 1<<5;  GP_IRQ_CallBack[5]();}
 8000704:	4b26      	ldr	r3, [pc, #152]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000706:	695b      	ldr	r3, [r3, #20]
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	2b00      	cmp	r3, #0
 800070e:	d008      	beq.n	8000722 <EXTI9_5_IRQHandler+0x22>
 8000710:	4b23      	ldr	r3, [pc, #140]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000712:	695b      	ldr	r3, [r3, #20]
 8000714:	4a22      	ldr	r2, [pc, #136]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000716:	f043 0320 	orr.w	r3, r3, #32
 800071a:	6153      	str	r3, [r2, #20]
 800071c:	4b21      	ldr	r3, [pc, #132]	; (80007a4 <EXTI9_5_IRQHandler+0xa4>)
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	4798      	blx	r3
	if(EXTI->PR & 1<<6){ EXTI->PR |= 1<<6;  GP_IRQ_CallBack[6]();}
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <EXTI9_5_IRQHandler+0x40>
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a1b      	ldr	r2, [pc, #108]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000738:	6153      	str	r3, [r2, #20]
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <EXTI9_5_IRQHandler+0xa4>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4798      	blx	r3
	if(EXTI->PR & 1<<7){ EXTI->PR |= 1<<7;  GP_IRQ_CallBack[7]();}
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <EXTI9_5_IRQHandler+0x5e>
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 800074e:	695b      	ldr	r3, [r3, #20]
 8000750:	4a13      	ldr	r2, [pc, #76]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000756:	6153      	str	r3, [r2, #20]
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <EXTI9_5_IRQHandler+0xa4>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	4798      	blx	r3
	if(EXTI->PR & 1<<8){ EXTI->PR |= 1<<8;  GP_IRQ_CallBack[8]();}
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000766:	2b00      	cmp	r3, #0
 8000768:	d008      	beq.n	800077c <EXTI9_5_IRQHandler+0x7c>
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 800076c:	695b      	ldr	r3, [r3, #20]
 800076e:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 8000770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000774:	6153      	str	r3, [r2, #20]
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <EXTI9_5_IRQHandler+0xa4>)
 8000778:	6a1b      	ldr	r3, [r3, #32]
 800077a:	4798      	blx	r3
	if(EXTI->PR & 1<<9){ EXTI->PR |= 1<<9;  GP_IRQ_CallBack[9]();}
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000784:	2b00      	cmp	r3, #0
 8000786:	d008      	beq.n	800079a <EXTI9_5_IRQHandler+0x9a>
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 800078a:	695b      	ldr	r3, [r3, #20]
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <EXTI9_5_IRQHandler+0xa0>)
 800078e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000792:	6153      	str	r3, [r2, #20]
 8000794:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <EXTI9_5_IRQHandler+0xa4>)
 8000796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000798:	4798      	blx	r3
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40010400 	.word	0x40010400
 80007a4:	20000034 	.word	0x20000034

080007a8 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	// First we need to know which one of them was pending
	if(EXTI->PR & 1<<10){ EXTI->PR |= 1<<10;  GP_IRQ_CallBack[10]();}
 80007ac:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d008      	beq.n	80007ca <EXTI15_10_IRQHandler+0x22>
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	4a29      	ldr	r2, [pc, #164]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007c2:	6153      	str	r3, [r2, #20]
 80007c4:	4b28      	ldr	r3, [pc, #160]	; (8000868 <EXTI15_10_IRQHandler+0xc0>)
 80007c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007c8:	4798      	blx	r3
	if(EXTI->PR & 1<<11){ EXTI->PR |= 1<<11;  GP_IRQ_CallBack[11]();}
 80007ca:	4b26      	ldr	r3, [pc, #152]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d008      	beq.n	80007e8 <EXTI15_10_IRQHandler+0x40>
 80007d6:	4b23      	ldr	r3, [pc, #140]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a22      	ldr	r2, [pc, #136]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <EXTI15_10_IRQHandler+0xc0>)
 80007e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e6:	4798      	blx	r3
	if(EXTI->PR & 1<<12){ EXTI->PR |= 1<<12;  GP_IRQ_CallBack[12]();}
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d008      	beq.n	8000806 <EXTI15_10_IRQHandler+0x5e>
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 80007fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007fe:	6153      	str	r3, [r2, #20]
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <EXTI15_10_IRQHandler+0xc0>)
 8000802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000804:	4798      	blx	r3
	if(EXTI->PR & 1<<13){ EXTI->PR |= 1<<13;  GP_IRQ_CallBack[13]();}
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <EXTI15_10_IRQHandler+0x7c>
 8000812:	4b14      	ldr	r3, [pc, #80]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a13      	ldr	r2, [pc, #76]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <EXTI15_10_IRQHandler+0xc0>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	4798      	blx	r3
	if(EXTI->PR & 1<<14){ EXTI->PR |= 1<<14;  GP_IRQ_CallBack[14]();}
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d008      	beq.n	8000842 <EXTI15_10_IRQHandler+0x9a>
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083a:	6153      	str	r3, [r2, #20]
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <EXTI15_10_IRQHandler+0xc0>)
 800083e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000840:	4798      	blx	r3
	if(EXTI->PR & 1<<15){ EXTI->PR |= 1<<15;  GP_IRQ_CallBack[15]();}
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800084a:	2b00      	cmp	r3, #0
 800084c:	d008      	beq.n	8000860 <EXTI15_10_IRQHandler+0xb8>
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000850:	695b      	ldr	r3, [r3, #20]
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <EXTI15_10_IRQHandler+0xbc>)
 8000854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000858:	6153      	str	r3, [r2, #20]
 800085a:	4b03      	ldr	r3, [pc, #12]	; (8000868 <EXTI15_10_IRQHandler+0xc0>)
 800085c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800085e:	4798      	blx	r3
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40010400 	.word	0x40010400
 8000868:	20000034 	.word	0x20000034

0800086c <Get_CRLH_Position>:
#include "../ARM2_CPU_MODES/stm_driver/inc/Stm32_F103C6_gpio_driver.h"



uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800087c:	f000 80a5 	beq.w	80009ca <Get_CRLH_Position+0x15e>
 8000880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000884:	f300 80a3 	bgt.w	80009ce <Get_CRLH_Position+0x162>
 8000888:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800088c:	f000 809b 	beq.w	80009c6 <Get_CRLH_Position+0x15a>
 8000890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000894:	f300 809b 	bgt.w	80009ce <Get_CRLH_Position+0x162>
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800089c:	f000 8091 	beq.w	80009c2 <Get_CRLH_Position+0x156>
 80008a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a4:	f300 8093 	bgt.w	80009ce <Get_CRLH_Position+0x162>
 80008a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008ac:	f000 8087 	beq.w	80009be <Get_CRLH_Position+0x152>
 80008b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008b4:	f300 808b 	bgt.w	80009ce <Get_CRLH_Position+0x162>
 80008b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008bc:	d07d      	beq.n	80009ba <Get_CRLH_Position+0x14e>
 80008be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008c2:	f300 8084 	bgt.w	80009ce <Get_CRLH_Position+0x162>
 80008c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008ca:	d074      	beq.n	80009b6 <Get_CRLH_Position+0x14a>
 80008cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008d0:	dc7d      	bgt.n	80009ce <Get_CRLH_Position+0x162>
 80008d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d6:	d06c      	beq.n	80009b2 <Get_CRLH_Position+0x146>
 80008d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008dc:	dc77      	bgt.n	80009ce <Get_CRLH_Position+0x162>
 80008de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e2:	d064      	beq.n	80009ae <Get_CRLH_Position+0x142>
 80008e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008e8:	dc71      	bgt.n	80009ce <Get_CRLH_Position+0x162>
 80008ea:	2b80      	cmp	r3, #128	; 0x80
 80008ec:	d05d      	beq.n	80009aa <Get_CRLH_Position+0x13e>
 80008ee:	2b80      	cmp	r3, #128	; 0x80
 80008f0:	dc6d      	bgt.n	80009ce <Get_CRLH_Position+0x162>
 80008f2:	2b20      	cmp	r3, #32
 80008f4:	dc48      	bgt.n	8000988 <Get_CRLH_Position+0x11c>
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd69      	ble.n	80009ce <Get_CRLH_Position+0x162>
 80008fa:	3b01      	subs	r3, #1
 80008fc:	2b1f      	cmp	r3, #31
 80008fe:	d866      	bhi.n	80009ce <Get_CRLH_Position+0x162>
 8000900:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <Get_CRLH_Position+0x9c>)
 8000902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000906:	bf00      	nop
 8000908:	0800098f 	.word	0x0800098f
 800090c:	08000993 	.word	0x08000993
 8000910:	080009cf 	.word	0x080009cf
 8000914:	08000997 	.word	0x08000997
 8000918:	080009cf 	.word	0x080009cf
 800091c:	080009cf 	.word	0x080009cf
 8000920:	080009cf 	.word	0x080009cf
 8000924:	0800099b 	.word	0x0800099b
 8000928:	080009cf 	.word	0x080009cf
 800092c:	080009cf 	.word	0x080009cf
 8000930:	080009cf 	.word	0x080009cf
 8000934:	080009cf 	.word	0x080009cf
 8000938:	080009cf 	.word	0x080009cf
 800093c:	080009cf 	.word	0x080009cf
 8000940:	080009cf 	.word	0x080009cf
 8000944:	0800099f 	.word	0x0800099f
 8000948:	080009cf 	.word	0x080009cf
 800094c:	080009cf 	.word	0x080009cf
 8000950:	080009cf 	.word	0x080009cf
 8000954:	080009cf 	.word	0x080009cf
 8000958:	080009cf 	.word	0x080009cf
 800095c:	080009cf 	.word	0x080009cf
 8000960:	080009cf 	.word	0x080009cf
 8000964:	080009cf 	.word	0x080009cf
 8000968:	080009cf 	.word	0x080009cf
 800096c:	080009cf 	.word	0x080009cf
 8000970:	080009cf 	.word	0x080009cf
 8000974:	080009cf 	.word	0x080009cf
 8000978:	080009cf 	.word	0x080009cf
 800097c:	080009cf 	.word	0x080009cf
 8000980:	080009cf 	.word	0x080009cf
 8000984:	080009a3 	.word	0x080009a3
 8000988:	2b40      	cmp	r3, #64	; 0x40
 800098a:	d00c      	beq.n	80009a6 <Get_CRLH_Position+0x13a>
 800098c:	e01f      	b.n	80009ce <Get_CRLH_Position+0x162>
	{
	case GPIO_PIN_0:
		return 0;
 800098e:	2300      	movs	r3, #0
 8000990:	e01e      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_1:
		return 4;
 8000992:	2304      	movs	r3, #4
 8000994:	e01c      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_2:
		return 8;
 8000996:	2308      	movs	r3, #8
 8000998:	e01a      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_3:
		return 12;
 800099a:	230c      	movs	r3, #12
 800099c:	e018      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_4:
		return 16;
 800099e:	2310      	movs	r3, #16
 80009a0:	e016      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_5:
		return 20;
 80009a2:	2314      	movs	r3, #20
 80009a4:	e014      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_6:
		return 24;
 80009a6:	2318      	movs	r3, #24
 80009a8:	e012      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_7:
		return 28;
 80009aa:	231c      	movs	r3, #28
 80009ac:	e010      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_8:
		return 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e00e      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_9:
		return 4;
 80009b2:	2304      	movs	r3, #4
 80009b4:	e00c      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_10:
		return 8;
 80009b6:	2308      	movs	r3, #8
 80009b8:	e00a      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_11:
		return 12;
 80009ba:	230c      	movs	r3, #12
 80009bc:	e008      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_12:
		return 16;
 80009be:	2310      	movs	r3, #16
 80009c0:	e006      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_13:
		return 20;
 80009c2:	2314      	movs	r3, #20
 80009c4:	e004      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_14:
		return 24;
 80009c6:	2318      	movs	r3, #24
 80009c8:	e002      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	case GPIO_PIN_15:
		return 28;
 80009ca:	231c      	movs	r3, #28
 80009cc:	e000      	b.n	80009d0 <Get_CRLH_Position+0x164>
		break;
	}
	return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MCAL_GPIO_Init>:
 * 						  But LQFP48 has only GPIO A,B, part of C,D exported as external pins from the MCU
 */


void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configures PIN 0 >> 7
	// Port configuration register high (GPIOx_CRH) configures PIN 8 >> 15

	volatile uint32_t* config_register = NULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
	uint8_t PINConfig = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	73fb      	strb	r3, [r7, #15]
	config_register = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	2bff      	cmp	r3, #255	; 0xff
 80009f4:	d801      	bhi.n	80009fa <MCAL_GPIO_Init+0x1e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	e001      	b.n	80009fe <MCAL_GPIO_Init+0x22>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3304      	adds	r3, #4
 80009fe:	60bb      	str	r3, [r7, #8]
	// Clear CNF[1:0] and MODE[1:0]
	(*config_register) &= ~(0xf << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	881b      	ldrh	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff31 	bl	800086c <Get_CRLH_Position>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	230f      	movs	r3, #15
 8000a10:	4093      	lsls	r3, r2
 8000a12:	43da      	mvns	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	401a      	ands	r2, r3
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	601a      	str	r2, [r3, #0]

	// If pin is output
	if(PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_AF_OUTPUT_PUSHPULL || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OPENDRAIN || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PUSHPULL)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	789b      	ldrb	r3, [r3, #2]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	d00b      	beq.n	8000a3e <MCAL_GPIO_Init+0x62>
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	789b      	ldrb	r3, [r3, #2]
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d007      	beq.n	8000a3e <MCAL_GPIO_Init+0x62>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	789b      	ldrb	r3, [r3, #2]
 8000a32:	2b05      	cmp	r3, #5
 8000a34:	d003      	beq.n	8000a3e <MCAL_GPIO_Init+0x62>
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	789b      	ldrb	r3, [r3, #2]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d10e      	bne.n	8000a5c <MCAL_GPIO_Init+0x80>
	{
		// Set CNF[1:0] and MODE[1:0]

		// From our header file comparing with TRM, << 2 because CNF has the upper 2 bits
		// & 0x0f because we need the first 4 bits only
		PINConfig = ((((PinConfig->GPIO_MODE - 4) << 2) | (PinConfig->GPIO_OUTPUT_SPEED)) & 0x0f);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	789b      	ldrb	r3, [r3, #2]
 8000a42:	3b04      	subs	r3, #4
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	b25a      	sxtb	r2, r3
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	78db      	ldrb	r3, [r3, #3]
 8000a4c:	b25b      	sxtb	r3, r3
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e02c      	b.n	8000ab6 <MCAL_GPIO_Init+0xda>

	}
	// If pin is input (MODE = 00)
	else
	{
		if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLOATING || PinConfig->GPIO_MODE == GPIO_MODE_Analog)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d003      	beq.n	8000a6c <MCAL_GPIO_Init+0x90>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	789b      	ldrb	r3, [r3, #2]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d107      	bne.n	8000a7c <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF[1:0] and MODE = 00, also we don't need to subtract anything
			PINConfig = ((((PinConfig->GPIO_MODE) << 2) | 0x00) & 0x0f);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	f003 030f 	and.w	r3, r3, #15
 8000a78:	73fb      	strb	r3, [r7, #15]
 8000a7a:	e01c      	b.n	8000ab6 <MCAL_GPIO_Init+0xda>
		}else if(PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	789b      	ldrb	r3, [r3, #2]
 8000a80:	2b08      	cmp	r3, #8
 8000a82:	d102      	bne.n	8000a8a <MCAL_GPIO_Init+0xae>
		{
			// It doesn't exist within the table of these configurations
			// We read from specs that it should be handled as input floating
			PINConfig = (((GPIO_MODE_INPUT_FLOATING << 2) | 0x00) & 0x0f);
 8000a84:	2304      	movs	r3, #4
 8000a86:	73fb      	strb	r3, [r7, #15]
 8000a88:	e015      	b.n	8000ab6 <MCAL_GPIO_Init+0xda>
		}else
		{
			// Dealing with Pull up and pull down
			PINConfig = (((GPIO_MODE_INPUT_PULLUP << 2) | 0x00) & 0x0f);
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	73fb      	strb	r3, [r7, #15]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PULLUP)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	789b      	ldrb	r3, [r3, #2]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d107      	bne.n	8000aa6 <MCAL_GPIO_Init+0xca>
			{
				// (Pull up) Table 20. Port bit configuration table, PxODR = 1
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;  // It is already shifted by its number (from our configuration)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	8812      	ldrh	r2, [r2, #0]
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	e007      	b.n	8000ab6 <MCAL_GPIO_Init+0xda>
			}else
			{
				// (Pull down) Table 20. Port bit configuration table, PxODR = 0
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);  // It is already shifted by its number (from our configuration)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	8812      	ldrh	r2, [r2, #0]
 8000aae:	43d2      	mvns	r2, r2
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// Finally, we just need to shift this variable with the position of the pin, and determine whether it is CRL or CRH
	(*config_register) |= (PINConfig << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000ab6:	7bfc      	ldrb	r4, [r7, #15]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fed5 	bl	800086c <Get_CRLH_Position>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	fa04 f203 	lsl.w	r2, r4, r3
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	601a      	str	r2, [r3, #0]


}
 8000ad2:	bf00      	nop
 8000ad4:	3714      	adds	r7, #20
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd90      	pop	{r4, r7, pc}
	...

08000adc <__libc_init_array>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	2600      	movs	r6, #0
 8000ae0:	4d0c      	ldr	r5, [pc, #48]	; (8000b14 <__libc_init_array+0x38>)
 8000ae2:	4c0d      	ldr	r4, [pc, #52]	; (8000b18 <__libc_init_array+0x3c>)
 8000ae4:	1b64      	subs	r4, r4, r5
 8000ae6:	10a4      	asrs	r4, r4, #2
 8000ae8:	42a6      	cmp	r6, r4
 8000aea:	d109      	bne.n	8000b00 <__libc_init_array+0x24>
 8000aec:	f000 f81a 	bl	8000b24 <_init>
 8000af0:	2600      	movs	r6, #0
 8000af2:	4d0a      	ldr	r5, [pc, #40]	; (8000b1c <__libc_init_array+0x40>)
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <__libc_init_array+0x44>)
 8000af6:	1b64      	subs	r4, r4, r5
 8000af8:	10a4      	asrs	r4, r4, #2
 8000afa:	42a6      	cmp	r6, r4
 8000afc:	d105      	bne.n	8000b0a <__libc_init_array+0x2e>
 8000afe:	bd70      	pop	{r4, r5, r6, pc}
 8000b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b04:	4798      	blx	r3
 8000b06:	3601      	adds	r6, #1
 8000b08:	e7ee      	b.n	8000ae8 <__libc_init_array+0xc>
 8000b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0e:	4798      	blx	r3
 8000b10:	3601      	adds	r6, #1
 8000b12:	e7f2      	b.n	8000afa <__libc_init_array+0x1e>
 8000b14:	08000b48 	.word	0x08000b48
 8000b18:	08000b48 	.word	0x08000b48
 8000b1c:	08000b48 	.word	0x08000b48
 8000b20:	08000b4c 	.word	0x08000b4c

08000b24 <_init>:
 8000b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b26:	bf00      	nop
 8000b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b2a:	bc08      	pop	{r3}
 8000b2c:	469e      	mov	lr, r3
 8000b2e:	4770      	bx	lr

08000b30 <_fini>:
 8000b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b32:	bf00      	nop
 8000b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b36:	bc08      	pop	{r3}
 8000b38:	469e      	mov	lr, r3
 8000b3a:	4770      	bx	lr
